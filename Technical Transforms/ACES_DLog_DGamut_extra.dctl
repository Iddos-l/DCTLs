// D-Log D-Gamut to ACES DCTL

typedef struct
{
float3 r0, r1, r2;
} mat3;

__DEVICE__ mat3 make_mat3( float3 A, float3 B, float3 C)
{
mat3 D;
D.r0 = A;
D.r1 = B;
D.r2 = C;
return D;
}

__DEVICE__ inline mat3 mult_f33_f33( mat3 A, mat3 B)
{
float m[3][3];
float a[3][3] =    {{A.r0.x, A.r0.y, A.r0.z},
{A.r1.x, A.r1.y, A.r1.z},
{A.r2.x, A.r2.y, A.r2.z}};
float b[3][3] =    {{B.r0.x, B.r0.y, B.r0.z},
{B.r1.x, B.r1.y, B.r1.z},
{B.r2.x, B.r2.y, B.r2.z}};

for( int i = 0; i < 3; ++i)
{
for( int j = 0; j < 3; ++j)
{
m[i][j] = 0.0f;
for( int k = 0; k < 3; ++k)
{
m[i][j] = m[i][j] + a[i][k] * b[k][j];
}
}
}
mat3 M = make_mat3(make_float3(m[0][0], m[0][1], m[0][2]),
make_float3(m[1][0], m[1][1], m[1][2]), make_float3(m[2][0], m[2][1], m[2][2]));
return M;
}

__DEVICE__ float3 mult_f3_f33 (float3 In, mat3 A)
{
float out[3];
float in[3] = {In.x, In.y, In.z};
float a[3][3] =    {{A.r0.x, A.r0.y, A.r0.z},
	  {A.r1.x, A.r1.y, A.r1.z},
	  {A.r2.x, A.r2.y, A.r2.z}};
for( int i = 0; i < 3; ++i)
{
out[i] = 0.0f;
for( int j = 0; j < 3; ++j)
{
out[i] = out[i] + in[j] * a[i][j];
}
}
return make_float3(out[0], out[1], out[2]);
}


#define dgamut_to_xyz        	make_mat3(make_float3(0.6482f, 0.1940f, 0.1082f), make_float3(0.2830f, 0.8132f, -0.0962f), make_float3(-0.0183f, -0.0832f, 1.1903f))
						  
#define xyz_to_dgamut       	make_mat3(make_float3(1.7257f, -0.4314f, -0.1917f), make_float3(-0.6025f, 1.3906f, 0.1671f), make_float3(-0.0156f, 0.0905f, 0.8489f))
																  
#define acesAP0_to_xyz       	make_mat3(make_float3(0.9525523959f, 0.0f, 0.0000936786f), make_float3(0.3439664498f, 0.7281660966f, -0.0721325464f), make_float3(0.0f, 0.0f, 1.0088251844f))
						  
#define xyz_to_acesAP0       	make_mat3(make_float3(1.0498110175f, 0.0f, -0.0000974845f), make_float3(-0.4959030231f, 1.3733130458f, 0.0982400361f), make_float3(0.0f, 0.0f, 0.9912520182f))
						  
#define acesAP1_to_xyz       	make_mat3(make_float3(0.6624541811f, 0.1340042065f, 0.1561876870f), make_float3(0.2722287168f, 0.6740817658f, 0.0536895174f), make_float3(-0.0055746495f, 0.0040607335f, 1.0103391003f))
						  
#define xyz_to_acesAP1       	make_mat3(make_float3(1.6410233797f, -0.3248032942f, -0.2364246952f), make_float3(-0.6636628587f, 1.6153315917f, 0.0167563477f), make_float3(0.0117218943f, -0.0082844420f, 0.9883948585f))

#define dgamut_to_AP0        	mult_f33_f33(dgamut_to_xyz, xyz_to_acesAP0)

#define dgamut_to_AP1        	mult_f33_f33(dgamut_to_xyz, xyz_to_acesAP1)

#define dgamut_to_rec709       	make_mat3(make_float3(1.6746f, -0.5797f, -0.0949f), make_float3(-0.0981f, 1.3340f, -0.2359f), make_float3(-0.0410f, -0.2430f, 1.2840f))
						  
#define rec709_to_dgamut       	make_mat3(make_float3(0.6163f, 0.2857f, 0.0980f), make_float3(0.0505f, 0.7990f, 0.1505f), make_float3(0.0292f, 0.1604f, 0.8104f))


__DEVICE__ float dlog_to_lin( float in)
{
float out = in <= 0.14f ? (in - 0.0929f) / 6.025f : (_powf(10.0f, 3.89616 * in - 2.27752f) - 0.0108f) / 0.9892f;
return out;
}

__DEVICE__ float3 dlog_to_lin( float3 in)
{
float3 out;
out.x = dlog_to_lin(in.x);
out.y = dlog_to_lin(in.y);
out.z = dlog_to_lin(in.z);
return out;
}

__DEVICE__ float lin_to_dlog( float in)
{
float out = in <= 0.0078f ? 6.025f * in + 0.0929f : _log10f(in * 0.9892f + 0.0108f) * 0.256663f + 0.584555f;

return out;
}

__DEVICE__ float3 lin_to_dlog( float3 in)
{
float3 out;
out.x = lin_to_dlog(in.x);
out.y = lin_to_dlog(in.y);
out.z = lin_to_dlog(in.z);
return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float3 rgb = make_float3(p_R, p_G, p_B);

rgb = dlog_to_lin(rgb);

rgb = mult_f3_f33(rgb, dgamut_to_AP0);

//rgb = mult_f3_f33(rgb, dgamut_to_AP1);
//rgb = mult_f3_f33(rgb, dgamut_to_rec709);

//rgb = lin_to_dlog(rgb);

return rgb;
}