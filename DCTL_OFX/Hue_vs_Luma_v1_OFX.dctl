// Hue vs Luma OFX DCTL

DEFINE_UI_PARAMS(RED, Red, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(YELLOW, Yellow, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(GREEN, Green, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(CYAN, Cyan, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(BLUE, Blue, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(MAGENTA, Magenta, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(LINEAR, Linear, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(CHART, Display Hue Chart, DCTLUI_CHECK_BOX, 0)

__DEVICE__ float Luma( float R, float G, float B, int L)
{
float lumaRec709 = R * 0.2126f + G * 0.7152f + B * 0.0722f;
float lumaRec2020 = R * 0.2627f + G * 0.6780f + B * 0.0593f;
float lumaDCIP3 = R * 0.209492f + G * 0.721595f + B * 0.0689131f;
float lumaACESAP0 = R * 0.3439664498f + G * 0.7281660966f + B * -0.0721325464f;
float lumaACESAP1 = R * 0.2722287168f + G * 0.6740817658f + B * 0.0536895174f;
float lumaAvg = (R + G + B) / 3;
float lumaMax = _fmaxf(_fmaxf(R, G), B);
float Lu = L == 0 ? lumaRec709 : L == 1 ? lumaRec2020 : L == 2 ? lumaDCIP3 : 
L == 3 ? lumaACESAP0 : L == 4 ? lumaACESAP1 : L == 5 ? lumaAvg : lumaMax;
return Lu;
}

__DEVICE__ float bellCurve( float c, float w, float x)
{
x = _fabs(x - c);
if( x > w ) return;
x /= w;
return 1 - x * x * (3 - 2 * x);
}

__DEVICE__ void HSV_to_RGB(float H, float S, float V, float *r, float *g, float *b)
{
if (S == 0){
*r = *g = *b = V;
} else {
H *= 6;
int i = _floor(H);
float f = H - i;
i = (i >= 0) ? (i % 6) : (i % 6) + 6;
float p = V * (1 - S);
float q = V * (1 - S * f);
float t = V * (1 - S * (1 - f));
*r = i == 0 ? V : i == 1 ? q : i == 2 ? p : i == 3 ? p : i == 4 ? t : V;
*g = i == 0 ? t : i == 1 ? V : i == 2 ? V : i == 3 ? q : i == 4 ? p : p;
*b = i == 0 ? p : i == 1 ? p : i == 2 ? t : i == 3 ? V : i == 4 ? V : q;
}
}

__DEVICE__ float3 Hue_Chart( int width, int height, int X, int Y)
{
float H, S, V, r, g, b;
H = (float)X / (width - 1.0f);
S = (float)Y / (height - 1.0f);
S = _powf(S, 0.4f);
V = 0.5f;
HSV_to_RGB(H, S, V, &r, &g, &b);
return make_float3(r, g, b);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

float3 In = CHART ? Hue_Chart(p_Width, p_Height, p_X, p_Y) : make_float3(p_R, p_G, p_B);
float3 RGB = In;

float MAX = _fmaxf(_fmaxf(RGB.x, RGB.y), RGB.z);
float MIN = _fminf(_fminf(RGB.x, RGB.y), RGB.z);
float DELTA = MAX - MIN;
float SAT = MAX != 0 ? DELTA / MAX : 0;
float LUMA = Luma(RGB.x, RGB.y, RGB.z, 0);

float alphaCyan = 1 - _fabs(RGB.y - RGB.z) / DELTA;
float alphaMagenta = 1 - _fabs(RGB.x - RGB.z) / DELTA;
float alphaYellow = 1 - _fabs(RGB.y - RGB.x) / DELTA;

if(!LINEAR){
alphaCyan = bellCurve(0.5f, 0.5f, alphaCyan/2);
alphaMagenta = bellCurve(0.5f, 0.5f, alphaMagenta/2);
alphaYellow = bellCurve(0.5f, 0.5f, alphaYellow/2);
}
if((LUMA < 0.1f && SAT < 0.1f) || DELTA == 0) return RGB;

if(In.x == MAX) RGB = RGB * RED * alphaCyan + RGB * (1 - alphaCyan);
if(In.x == MIN) RGB = RGB * CYAN * alphaCyan + RGB * (1 - alphaCyan);
if(In.y == MAX) RGB = RGB * GREEN * alphaMagenta + RGB * (1 - alphaMagenta);
if(In.y == MIN) RGB = RGB * MAGENTA * alphaMagenta + RGB * (1 - alphaMagenta);
if(In.z == MAX) RGB = RGB * BLUE * alphaYellow + RGB * (1 - alphaYellow);
if(In.z == MIN) RGB = RGB * YELLOW * alphaYellow + RGB * (1 - alphaYellow);

return RGB;
}