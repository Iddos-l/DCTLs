// Random 12 OFX DCTL

DEFINE_UI_PARAMS(TIME, Rotate, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)

__DEVICE__ float time = 0;

typedef struct
{
float2 r0, r1;
} mat2;

__DEVICE__ mat2 make_mat2(float2 A, float2 B)
{
mat2 C;
C.r0 = A;
C.r1 = B;
return C;
}

__DEVICE__ float2 multi(float2 A, mat2 B)
{
float2 C;
C.x = A.x * B.r0.x + A.y * B.r0.y;
C.y = A.x * B.r1.x + A.y * B.r1.y;
return C;
}

__DEVICE__ float2 ABS( float2 A)
{
return make_float2(_fabs(A.x), _fabs(A.y));
}

__DEVICE__ float3 ABS( float3 A)
{
return make_float3(_fabs(A.x), _fabs(A.y), _fabs(A.z));
}

__DEVICE__ float3 POW( float3 in, float3 pw)
{
float3 out;
out.x = _powf( in.x, pw.x);
out.y = _powf( in.y, pw.y);
out.z = _powf( in.z, pw.z);
return out;
}

__DEVICE__ float2 MAX( float2 A, float B)
{
return make_float2(_fmaxf(A.x, B), _fmaxf(A.y, B));
}

__DEVICE__ float3 mix(float3 A, float3 B, float C)
{
return A * (1.0f - C) + B * C;
}

__DEVICE__ float form(float2 p)
{
p.x = _fmod(p.x + 1.0f, 2.0f) - 1.0f;
p.y = _fmod(p.y + 1.0f, 2.0f) - 1.0f;
for(int i = 0; i < 4; i++) {
p = ABS(p) / _clampf(dot(p, p), 0.5f, 1.0f) - make_float2(0.7f, 0.5f);
}

return smoothstep(_fabs(p.x), 0.0f, 0.4f);
}

__DEVICE__ float sur(float3 p, float3 n)
{
float3 m = POW(ABS(n), make_float3(10.0f));

float x = form(make_float2(p.y, p.z));
float y = form(make_float2(p.x, p.z));
float z = form(make_float2(p.x, p.y));

return (m.x*x + m.y*y + m.z*z)/(m.x + m.y + m.z);
}

__DEVICE__ float3 bump(float3 p, float3 n)
{
float2 h = make_float2(0.01f, 0.0f);
float3 b = make_float3(
sur(p + make_float3(h.x, h.y, h.y), n) - sur(p - make_float3(h.x, h.y, h.y), n),
sur(p + make_float3(h.y, h.x, h.y), n) - sur(p - make_float3(h.y, h.x, h.y), n),
sur(p + make_float3(h.y, h.y, h.x), n) - sur(p - make_float3(h.y, h.y, h.x), n));

b = b - n * dot(b, n);
return normalize(n + 4.0f * b);
}

__DEVICE__ float2 rot(float2 p, float a)
{
float s = _sinf(a);
float c = _cosf(a);

return multi(p, make_mat2(make_float2(c, s), make_float2(-s, c)));
}

__DEVICE__ float de(float3 p)
{
float4 q = make_float4(p - 1.0f, 1.0f);

for(int i = 0; i < 3; i++) {
q.x = _fabs(q.x + 1.0f) - 1.0f;
q.y = _fabs(q.y + 1.0f) - 1.0f;
q.z = _fabs(q.z + 1.0f) - 1.0f;
q = q / _clampf(dot(make_float3(q.x, q.y, q.z), make_float3(q.x, q.y, q.z)), 0.2f, 1.0f);

float2 qXY = rot(make_float2(q.x, q.y), 0.9f);
q.x = qXY.x * 1.4f;
q.y = qXY.y * 1.4f;
q.z *= 1.4f; 
}

float frac = (length(make_float2(q.x, q.z)) - 1.5f) / q.w;
frac = _fmaxf(length(p * make_float3(0.8f, 0.8f, 1.0f) - make_float3(0.0f, 0.4f, 0.0f)) - 1.4f, frac);

return _fminf(frac, p.y + 1.0f);
}

__DEVICE__ float trace(float3 ro, float3 rd, float mx)
{
float t = 0.0f;
for(int i = 0; i < 100; i++) {
float d = de(ro + rd * t);
if (d < 0.001f || t >= mx) break;
t += d * 0.5f;
}
return t;
}

__DEVICE__ float3 normal(float3 p)
{
float2 h = make_float2(0.001f, 0.0f);
float3 n = make_float3(
de(p + make_float3(h.x, h.y, h.y)) - de(p - make_float3(h.x, h.y, h.y)),
de(p + make_float3(h.y, h.x, h.y)) - de(p - make_float3(h.y, h.x, h.y)),
de(p + make_float3(h.y, h.y, h.x)) - de(p - make_float3(h.y, h.y, h.x)));

return normalize(n);
}

__DEVICE__ float ao(float3 pos, float3 nor)
{
float o = 0.0f;
float s = 0.005f;
for(int i = 0; i < 10; i++) {
float d = de(pos + nor*s);
o += (s - d);
s += s / float(i + 1.0f);
}

return _clampf(1.0f - o, 0.0f, 1.0f);
}

__DEVICE__ float3 render(float3 ro, float3 rd)
{
float3 col = make_float3(0.0f);
float3 lig = normalize(make_float3(0.8f, 0.7f, -0.6f));

float t = trace(ro, rd, 10.0f);
if (t < 10.0f) {
float3 pos = ro + rd*t;
float3 nor = normal(pos);
nor = bump(pos, nor);

float3 ref = reflect(rd, nor);

float occ = ao(pos, nor);

col = make_float3(0.2f * occ);
if (pos.y > -0.99f) {
col = col + (3.0f * _powf(_clampf(dot(ref, rd * -1.0f), 0.0f, 1.0f), 4.0f));
col = col + ((1.0f - occ) * make_float3(0.0f, 4.0f, 0.0f) * _fabs(_sinf(time * 3.0f)));
} else {
float sha = step(5.0f, trace(pos + nor * 0.001f, lig, 5.0f));
col = col + (2.0f * _powf(_clampf(dot(ref, lig), 0.0f, 1.0f), 16.0f) * (0.5f + 0.5f * sha));
col = col + _clampf(dot(lig, nor), 0.0f, 1.0f) * sha;
col = col + (_clampf(dot(pos * -1.0f, nor), 0.0f, 1.0f) * make_float3(0.0f, 0.5f, 0.0f) * _fabs(_sinf(time * 3.0f))/length(pos));
}
}

col = mix(col, make_float3(0.0f), 1.0f - _expf(-0.7f * t));

return col;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
time = TIME * 20;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);

float2 p = ((resolution * -1.0f) + 2.0f * XY) / resolution.y;

float t = time * 0.6f;
float3 ro = make_float3(4.0f * _sinf(t), 0.5f + 0.5f * _sinf(t * 0.5f), -4.0f * _cosf(t));
float3 ww = normalize(ro * -1.0f);
float3 uu = normalize(cross(make_float3(0.0f, 1.0f, 0.0f), ww));
float3 vv = normalize(cross(ww, uu));
float3 rd = normalize(p.x * uu + p.y * vv + 1.97f * ww);

float3 col = render(ro, rd);

col.x = 1.0f - _expf(-0.7f * col.x);
col.y = 1.0f - _expf(-0.7f * col.y);
col.z = 1.0f - _expf(-0.7f * col.z);
col = POW(ABS(col), make_float3(1.0f/2.2f));

return col;
}