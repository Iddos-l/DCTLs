// Map to 3D Cube OFX DCTL

DEFINE_UI_PARAMS(RotateY, Rotate Y, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(RotateZ, Rotate Z, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(RotateX, Rotate X, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(OffsetX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(OffsetY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(zoom, Zoom, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(density, Density, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(background, Background, DCTLUI_SLIDER_INT, 1, 1, 4, 1)
DEFINE_UI_PARAMS(Border, Border, DCTLUI_SLIDER_FLOAT, 0.5, 0, 1, 0.001)
DEFINE_UI_PARAMS(limit, Remove Black Spaces, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(apply, Apply Border, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(multiSample, Multi-Sample, DCTLUI_CHECK_BOX, 0)

#include "DCTL_Functions.h"

#define MAX_VOLUME_STEPS	290
#define VOLUME_STEP_SIZE	0.02f
#define MAX_ALPHA			1.0f

__DEVICE__ bool LINEAR_SAMPLE = true;
__DEVICE__ float DENSITY_SCALE = 1;
__DEVICE__ float BORDER = 1;
__DEVICE__ bool APPLY = true;
__DEVICE__ float3 vres = {0,0,0};
__DEVICE__ float width = 0;
__DEVICE__ float height = 0;
__DEVICE__ float LIMIT = 0;

__DEVICE__ __TEXTURE__ TexR;
__DEVICE__ __TEXTURE__ TexG;
__DEVICE__ __TEXTURE__ TexB;

__DEVICE__ bool isValid(float3 c)
{
return c.x > LIMIT && c.y > LIMIT && c.z > LIMIT && c.x < 1.0f && c.y < 1.0f && c.z < 1.0f;
}

__DEVICE__ float3 border(float3 uvw, float3 vres)
{
uvw.x = _fmod(_floor(uvw.x * vres.x), vres.x);
uvw.y = _fmod(_floor(uvw.y * vres.y), vres.y);
uvw.z = _fmod(_floor(uvw.z * vres.z), vres.z);

float r = uvw.x / vres.x;
float g = uvw.y / vres.y;
float b = uvw.z / vres.z;

float3 RGB = make_float3(r, g, b);

return RGB;
}

__DEVICE__ float4 texture3D(float3 uvw, float3 vres)
{
uvw.x = _fmod(_floor(uvw.x * vres.x), vres.x);
uvw.y = _fmod(_floor(uvw.y * vres.y), vres.y);
uvw.z = _fmod(_floor(uvw.z * vres.z), vres.z);

float idx = (uvw.z * (vres.x * vres.y)) + (uvw.y * vres.x) + uvw.x;

float2 uv = make_float2(_fmod(idx, width), _floor(idx / width));
uv.x = uv.x + 0.5f;
uv.y = uv.y + 0.5f;

float r, g, b, A;
int uvX = (int)uv.x;
int uvY = (int)uv.y;

r = _tex2D(TexR, uvX, uvY); 
g = _tex2D(TexG, uvX, uvY);
b = _tex2D(TexB, uvX, uvY);

float3 RGB = make_float3(r, g, b);

A = isValid(RGB) ? 1 : 0;

return make_float4(RGB, A);
}

__DEVICE__ float4 texture3DLinear(float3 uvw, float3 vres)
{
float3 blend = fract(uvw * vres);
float4 off = make_float4(1/vres, 0);

//2x2x2 sample blending
float4 b000 = texture3D(uvw + make_float3(off.w, off.w, off.w), vres);
float4 b100 = texture3D(uvw + make_float3(off.x, off.w, off.w), vres);

float4 b010 = texture3D(uvw + make_float3(off.w, off.y, off.w), vres);
float4 b110 = texture3D(uvw + make_float3(off.x, off.y, off.w), vres);

float4 b001 = texture3D(uvw + make_float3(off.w, off.w, off.z), vres);
float4 b101 = texture3D(uvw + make_float3(off.x, off.w, off.z), vres);

float4 b011 = texture3D(uvw + make_float3(off.w, off.y, off.w), vres);
float4 b111 = texture3D(uvw + make_float3(off.x, off.y, off.z), vres);

return mix(mix(mix(b000,b100,blend.x), mix(b010,b110,blend.x), blend.y), 
	 mix(mix(b001,b101,blend.x), mix(b011,b111,blend.x), blend.y),
	 blend.z);
}

__DEVICE__ float2 IntersectBox(float3 orig, float3 dir, float3 pos, float3 size)
{
size = size * 0.5f;
float3 mins = pos - size;
float3 maxs = pos + size;

float3 t0 = (mins - orig) / dir;
float3 t1 = (maxs - orig) / dir;

float3 tmp = t0;
if(dir.x < 0){ t0.x = t1.x; t1.x = tmp.x; }
if(dir.y < 0){ t0.y = t1.y; t1.y = tmp.y; }
if(dir.z < 0){ t0.z = t1.z; t1.z = tmp.z; }

float tmin = _fmaxf(_fmaxf(t0.x, t0.y), t0.z);
float tmax = _fminf(_fminf(t1.x, t1.y), t1.z);

return make_float2(tmin, tmax);
}

__DEVICE__ float4 MarchVolume(float3 orig, float3 dir)
{
float2 hit = IntersectBox(orig, dir, make_float3(0), make_float3(2));
if(hit.x > hit.y)
{
return make_float4(0);
}

//Step though the volume and add up the opacity.
float t = hit.x;   
float4 dst = make_float4(0);
float4 src = make_float4(0);

for(int i = 0; i < MAX_VOLUME_STEPS; i++)
{
t += VOLUME_STEP_SIZE;

//Stop marching if the ray leaves the cube.
if (t > hit.y) break;

float3 pos = orig + dir * t;
float3 uvw = 1 - (pos * 0.5f + 0.5f);

if(LINEAR_SAMPLE){
src = texture3DLinear(uvw, vres);
} else {
src = texture3D(uvw, vres);
}
src = CLAMP(src, 0, 1);

float scale = DENSITY_SCALE < 1 ? _powf(DENSITY_SCALE, 3) : DENSITY_SCALE; 
src.w *= scale;
src.x *= src.w;
src.y *= src.w;
src.z *= src.w;

dst = (1 - dst.w) * src + dst;

if(APPLY){
float3 brd = border(uvw, vres);
float edge = 0.01f;
float top = 1 - edge;
float XX = (brd.x <= edge || brd.x >= top) ? 1 : 0;
float YY = (brd.y <= edge || brd.y >= top) ? 1 : 0;
float ZZ = (brd.z <= edge || brd.z >= top) ? 1 : 0;
float xx = _fmaxf(XX, YY) * _fmaxf(ZZ,YY) * _fmaxf(ZZ,XX);
float xx1 = xx * BORDER;
dst.x = dst.x * (1 - xx) + xx1;
dst.y = dst.y * (1 - xx) + xx1;
dst.z = dst.z * (1 - xx) + xx1;
dst.w = dst.w > xx ? dst.w : xx;
}

//Stop marching if the color is nearly opaque.
if(dst.w > MAX_ALPHA){break;}
}

return dst;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{ 
float X = (float)p_X;
float Y = (float)p_Y;
width = (float)p_Width;
height = (float)p_Height;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);

TexR = p_TexR;
TexG = p_TexG;
TexB = p_TexB;

float vres1 = _powf(width * height, 1/3.0f);
vres1 = _floor(vres1);
vres = make_float3(vres1);  

float2 res = make_float2(width / height, 1);
float2 uv = XY / height;

float4 color = make_float4(0);
LIMIT = limit * 0.1f;
DENSITY_SCALE = density;
BORDER = Border;
LINEAR_SAMPLE = multiSample;
APPLY = apply;

//Checkerboard background
float2 bguv = uv - res/2;
float back = _sinf(bguv.x * PI * 8) * _sinf(bguv.y * PI * 8);
back = step(0, back);
back = back * 0.05f + 0.2f;
back = background == 2 ? 1 - back : background == 3 ? 0 : background == 4 ? 1 : back;
color = make_float4(back, back, back, 0);

float3 dir = normalize(make_float3(uv - res/2, 1));
float3 orig = make_float3(0, 0, -3.65f);

float Zoom = _fmaxf(zoom, 0.1f);
orig.x -= OffsetX * 4 / Zoom;
orig.y += OffsetY * 2 / Zoom;
orig.z /= Zoom;

rotate(&dir.x, &dir.z, RotateY * -4 - PI);
rotate(&orig.x, &orig.z, RotateY * -4 - PI);
rotate(&dir.x, &dir.y, RotateZ * 4);
rotate(&orig.x, &orig.y, RotateZ * 4);
rotate(&dir.y, &dir.z, RotateX * -4);
rotate(&orig.y, &orig.z, RotateX * -4);

float4 volume = MarchVolume(orig, dir);
color = mix(color, volume, volume.w);

return make_float3(color.x, color.y, color.z);
}