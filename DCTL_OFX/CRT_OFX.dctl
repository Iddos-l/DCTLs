// CRT OFX DCTL

DEFINE_UI_PARAMS(TIME, Scanlines, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(Curve, Curve, DCTLUI_SLIDER_FLOAT, 2, 0, 5, 0.001)
DEFINE_UI_PARAMS(Scan, Scan size, DCTLUI_SLIDER_FLOAT, 2, 0, 5, 0.001)
DEFINE_UI_PARAMS(SCALE, Scale, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(msX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(msY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ROTATE, Rotate, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)

#include "DCTL_Functions.h"

__DEVICE__ float time = 0;
__DEVICE__ float CURVE = 0;
__DEVICE__ float SCAN = 0;

__DEVICE__ float2 CRTCurveUV(float2 uv)
{
uv = uv * 2 - 1;
float2 offset = make_float2(_fabs(uv.y), _fabs(uv.x)) / make_float2(6, 4);
offset = offset * CURVE;
uv = uv + uv * offset * offset;
uv = uv * 0.5f + 0.5f;
return uv;
}

__DEVICE__ void DrawVignette(float3 *color, float2 uv)
{    
float3 col = *color;
float vignette = uv.x * uv.y * ( 1 - uv.x ) * ( 1 - uv.y );
vignette = _saturatef( _powf( 16 * vignette, 0.3f ));
*color = col * vignette;
}

__DEVICE__ void DrawScanline(float3 *color, float2 uv)
{
float3 col = *color;
float scanline = _saturatef( 0.95f + 0.05f * _cosf( PI * ( uv.y + 0.008f * time ) * (240.0f / SCAN) * 1 ));
float grille = 0.85f + 0.15f * _saturatef( 1.5f * _cosf( PI * uv.x * (640.0f / SCAN) * 1 ));    
*color = col * scanline * grille * 1.2f;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
time = TIME * 30;
CURVE = Curve;
SCAN = Scan;
float3 color = make_float3(p_R, p_G, p_B);

float2 uv = XY / resolution;
uv.x -= msX;
uv.y -= msY;
uv = uv - 0.5f;
rotate(&uv.x, &uv.y, ROTATE);
uv = uv / (SCALE + 0.001f);
uv = uv + 0.5f;
float2 crtUV = CRTCurveUV(uv);
if ( crtUV.x < 0 || crtUV.x > 1 || crtUV.y < 0 || crtUV.y > 1 )
color = make_float3(0);

DrawVignette(&color, crtUV);
DrawScanline(&color, uv);

return color;
}