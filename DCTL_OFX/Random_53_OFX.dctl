// Random 53 DCTL

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(msX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(msY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(SCALE, Zoom, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(ROTATE, Rotate, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)

__DEVICE__ inline void Rotate( float* ax, float* ay, float b)
{
float AX = *ax;
float AY = *ay;
float c = _cosf(b);
float s = _sinf(b);
*ax = AX * c - AY * s;
*ay = AX * s + AY * c;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{ 
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float time = TIME * 30;
float2 resolution = make_float2(width, height);

float2 p;
p.x = (X * 2.0f - resolution.x) / _fminf(resolution.x, resolution.y);
p.y = (Y * 2.0f - resolution.y) / _fminf(resolution.x, resolution.y);
p.x = (X - resolution.x * 0.5f) / resolution.y;
p.y = (Y - resolution.y * 0.5f) / resolution.y;
p.x -= msX;
p.y -= msY;
Rotate(&p.x, &p.y, ROTATE);
p = p / (SCALE + 0.001f);

float3 destColor = make_float3(1.0f, 0.3f, 0.7f);
float f = 0.0f;
for(float i = 0.0f; i < 40.0f; i++){
float s = (_sinf(time + i * 0.628318f / 8.0f) *  0.5f);
float c = _sinf(_cosf(time + i * 0.628318f / 2.0f) * _sinf(time * 0.5f));
f += (0.0025f / _fabs(length(p + make_float2(c, s)) - 0.5f));
}
destColor = destColor * f;

return destColor;
}