// Random 22 OFX DCTL

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)

#include "DCTL_Functions.h"

#define S(a, b, t) smoothstep(a, b, t)

__DEVICE__ float time = 0;

__DEVICE__ float N21( float2 p)
{
return fract(_sinf(p.x * 123.0f + p.y * 3456.0f) * 3524.0f);
}

__DEVICE__ float2 N22( float2 p)
{
return make_float2(N21(p), N21(p + 324.0f));
}

__DEVICE__ float L( float2 p, float2 a, float2 b)
{
float2 pa = p - a;
float2 ba = b - a;
float t = _saturatef(dot(pa, ba) / dot(ba, ba));
float d = length(pa - ba * t);

float m = S(0.02f, 0.0f, d);
d = length(a - b);
float f = S(1.0f, 0.8f, d);
m *= f;
m += m * S(0.05f, 0.06f, _fabs(d - 0.75f)) * 0.01f;
return m;
}

__DEVICE__ float2 GetPos( float2 p, float2 o)
{
p = p + o;
float2 n = N22(p) * time;
p = SIN(n) * 0.4f;
return o + p;
}

__DEVICE__ float G( float2 uv)
{
float2 id = floor(uv);
uv = fract(uv) - 0.5f;
float2 g = GetPos(id, make_float2(0));

float m = 0.0f;
for(float y = -1.0f; y <= 1.0f; y++) {
for(float x = -1.0f; x <= 1.0f; x++) {
float2 offs = make_float2(x, y);
float2 p = GetPos(id, offs);
m += L(uv, g, p);
float2 a = p - uv;
float flash = 0.002f / dot(a, a);
flash *= _powf( _sinf(N21(id + offs) * 1.414213562f + 100.0f * time) * 0.4f + 0.6f, 1.0f);
m += flash;
}
}
m += L(uv, GetPos(id, make_float2(-1, 0)), GetPos(id, make_float2(0, -1)));
m += L(uv, GetPos(id, make_float2(0, -1)), GetPos(id, make_float2(1, 0)));
m += L(uv, GetPos(id, make_float2(1, 0)), GetPos(id, make_float2(0, 1)));
m += L(uv, GetPos(id, make_float2(0, 1)), GetPos(id, make_float2(-1, 0)));

float d = length(g - uv);
return m;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
time = TIME * 10 + 1;
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 XY = make_float2(X, Y);
float2 resolution = make_float2(width, height);
float2 UV = (XY - 0.5f * resolution) / resolution.y;

float d = step(UV.y, 0.0f);
float m = 0.0f;
float t = time * 0.2f;

for(float i = 0.0f; i < 1.0f; i += 0.2f) {
float z = fract(i + t);
float s = mix(10.0f, 0.5f, z);
float f = S(0.0f, 0.4f, z) * S(1.0f, 0.8f, z);
m += G(UV * s + 1000.0f * i) * f;
}

t *= 10.0f;
float3 base = 0.5f + SIN(make_float3(1.0f, 0.56f, 0.76f) * t) * 0.1f;
float3 col = base;
col = col * m;
col = col - UV.y * base;
col = col * (1.0f - dot(UV, UV));

return col;
}