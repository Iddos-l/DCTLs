// Random 44 OFX DCTL

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(SCALE, Zoom, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(msX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(msY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ROTATEy, RotateY, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(ROTATEz, RotateZ, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(ROTATEx, RotateX, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)

#include "DCTL_Functions.h"

__DEVICE__ float time = 0;

__DEVICE__ void cmul( float2 a, float* b1, float* b2)
{
float B1 = a.x * *b1 - a.y * *b2;
float B2 = a.x * *b2 + a.y * *b1;
*b1 = B1;
*b2 = B2;
}

__DEVICE__ float3 dmul( float3 a, float3 b)
{
float r = length(a);
//b.xy = cmul(normalize(a.xy), b.xy);
cmul(normalize(make_float2(a.x, a.y)), &b.x, &b.y);
//b.yz = cmul(normalize(a.yz), b.yz);
cmul(normalize(make_float2(a.y, a.z)), &b.y, &b.z);
//b.xz += 0.3 * cmul(normalize(a.xz), b.xz);
cmul(normalize(make_float2(a.x, a.z)), &b.x, &b.z);
b.x += 0.3f * b.x; 
b.z += 0.3f * b.z; 
return r*b;
}

__DEVICE__ float field( float3 p)
{
float res = 0;
float3 c = p;
for (int i = 0; i < 10; ++i)
{
p = ABS(p) / dot(p,p) - 1;
p = dmul(p, p) + 0.7f;
res += _expf(-6 * _fabs(dot(p, c) - 0.15f));
}
return _fmaxf(0, res / 3);
}

__DEVICE__ float3 raycast( float3 ro, float3 rd)
{
float t = 1.5f;
float dt = 0.25f;
float3 col = make_float3(0);
for( int i = 20; i < 25; i++ )
{
float c = field(ro + t * rd);
t += dt / (0.35f + c * c);
c = _fmaxf(5 * c - 0.9f, 0);
c = c * c * c * c;
col = 0.04f * col + 0.04f * make_float3(0.1f * c * c, 0.2f * c, 0);

}
return col;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
time = TIME * 100 + 20;

float2 mouse = make_float2(0);

float2 q = XY / resolution;
float2 p = -1 + 2 * q;
p.x *= resolution.x / resolution.y;
p = (p + p - 0.5f);// / (SCALE + 0.1f);
p.x -= msX * 4;
p.y -= msY * 4;
p = p / (SCALE + 0.1f);

float angle = 0.05f * time + PI * mouse.x;
float3 ro = make_float3(3.2f * _cosf(angle) + 0.5f, 0, 3.2f * _sinf(angle) + 0.5f);
float3 ta = make_float3(0, 1.2f - 2 * mouse.y, 0);
float3 ww = normalize (ta - ro );
float3 uu = normalize (cross (ww, make_float3(0, 1, 0)));
float3 vv = normalize (cross (uu, ww));
float3 rd = normalize (p.x * uu + p.y * vv + 4 * ww);

rotate(&ro.z, &ro.x, ROTATEy);
rotate(&rd.z, &rd.x, ROTATEy);

rotate(&ro.z, &ro.y, ROTATEz);
rotate(&rd.z, &rd.y, ROTATEz);

rotate(&ro.y, &ro.x, ROTATEx);
rotate(&rd.y, &rd.x, ROTATEx);

float3 col = raycast(ro, rd);

col =  0.3f * LOG(1 + 0.2f * col);
col = SQRT(col);

return col;
}