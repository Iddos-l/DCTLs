// Fire Volume OFX DCTL

DEFINE_UI_PARAMS(TIME, Explode, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(ZOOM, Zoom, DCTLUI_SLIDER_FLOAT, 1, 0, 3, 0.001)
DEFINE_UI_PARAMS(ROTATEy, RotateY, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(SUN, Core, DCTLUI_SLIDER_FLOAT, 1, 0, 3, 0.001)
DEFINE_UI_PARAMS(NUDGE, Nudge, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(FREQUENCY, Frequency, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(STEPS, Pixelate, DCTLUI_SLIDER_INT, 1, 1, 100, 1)
DEFINE_UI_PARAMS(SOFT, Soft Clip, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(LEFT, Alt Version, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(BOTH, Both, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(DITHERING, Dithering, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(TONEMAPPING, Tonemapping, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(LOWQUALITY, Low Quality, DCTLUI_CHECK_BOX, 0)

#include "DCTL_Functions.h"

__DEVICE__ float time = 0.0f;
__DEVICE__ float nudge = 0.0f;
__DEVICE__ float frequency = 0.0f;
__DEVICE__ bool LOW_QUALITY = false;

__DEVICE__ float3 hash( float3 p )
{
p = make_float3( dot(p, make_float3(127.1f, 311.7f, 74.7f)), dot(p, make_float3(269.5f, 183.3f, 246.1f)), dot(p, make_float3(113.5f, 271.9f, 124.6f)));
return -1.0f + 2.0f * fract(SIN(p) * 43758.5453123f);
}

__DEVICE__ float noise( float3 p )
{
float3 i = floor( p );
float3 f = fract( p );

float3 u = f * f * (3.0f - 2.0f * f);

return 1.0f - 0.9f * mix( mix( mix( dot( hash( i + make_float3(0.0f) ), f - make_float3(0.0f) ), 
  dot( hash( i + make_float3(1.0f, 0.0f, 0.0f) ), f - make_float3(1.0f, 0.0f, 0.0f) ), u.x),
mix( dot( hash( i + make_float3(0.0f, 1.0f, 0.0f) ), f - make_float3(0.0f, 1.0f, 0.0f) ), 
  dot( hash( i + make_float3(1.0f, 1.0f, 0.0f) ), f - make_float3(1.0f, 1.0f, 0.0f) ), u.x), u.y),
mix( mix( dot( hash( i + make_float3(0.0f, 0.0f, 1.0f) ), f - make_float3(0.0f, 0.0f, 1.0f) ), 
  dot( hash( i + make_float3(1.0f, 0.0f, 1.0f) ), f - make_float3(1.0f, 0.0f, 1.0f) ), u.x),
mix( dot( hash( i + make_float3(0.0, 1.0f, 1.0f) ), f - make_float3(0.0f, 1.0f, 1.0f) ), 
  dot( hash( i + make_float3(1.0f, 1.0f, 1.0f) ), f - make_float3(1.0f, 1.0f, 1.0f) ), u.x), u.y), u.z );
}

__DEVICE__ float fbm( float3 p )
{
return noise(p * 0.06125f) * 0.75f + noise(p * 0.125f) * 0.325f + noise(p * 0.4f) * 0.2f;
}

__DEVICE__ float rand(float2 co)
{
return fract(_sinf(dot( co * 0.123f, make_float2(12.9898f, 78.233f))) * 43758.5453f);
}

__DEVICE__ float Sphere( float3 p, float r )
{
return length(p) - r ;
}

#define normalizer	(1.0f / _sqrtf(1.0f + nudge * nudge))

__DEVICE__ float SpiralNoiseC(float3 p)
{

float n = _fmod(time * 0.1f, -4.0f);
float iter = 2.0f;
for (int i = 0; i < 8; i++)
{
n += -_fabs(_sinf(p.y * iter) + _cosf(p.x * iter)) / iter;
p = p + make_float3(p.y * nudge, -p.x * nudge, 0.0f);
p.x *= normalizer;
p.y *= normalizer;
p = p + make_float3(p.z * nudge, 0.0f, -p.x * nudge);
p.x *= normalizer;
p.z *= normalizer;
iter *= 1.733733f * frequency;
}
return n;
}

__DEVICE__ float VolumetricExplosion(float3 p)
{
float final = Sphere(p, 4.0f);

if (LOW_QUALITY)
final += noise(p * 12.5f) * 0.2f;
else
final += fbm(p * 50.0f);
final += SpiralNoiseC(make_float3(p.z, p.x, p.y) * 0.4132f + 333.0f) * 1.0f;
return final;
}

__DEVICE__ float map(float3 p) 
{
float VolExplosion = VolumetricExplosion(p / 0.5f) * 0.5f;
return VolExplosion;
}

__DEVICE__ float3 computeColor( float density, float radius )
{
float3 result = mix( make_float3(1.0f, 0.9f, 0.8f), make_float3(0.4f, 0.15f, 0.1f), density );

float3 colCenter = 7.0f * make_float3(0.8f, 1.0f, 1.0f);
float3 colEdge = 1.5f * make_float3(0.48f, 0.53f, 0.5f);
result = result * mix( colCenter, colEdge, _fminf( (radius + 0.05f) / 0.9f, 1.15f) );

return result;
}

__DEVICE__ bool RaySphereIntersect(float3 org, float3 dir, float* near, float* far)
{
float b = dot(dir, org);
float c = dot(org, org) - 8.0f;
float delta = b * b - c;
if( delta < 0.0f) 
return false;
float deltasqrt = _sqrtf(delta);
*near = -b - deltasqrt;
*far = -b + deltasqrt;
return *far > 0.0f;
}

__DEVICE__ float3 ToneMapFilmicALU( float3 _color)
{
_color = MAX(make_float3(0.0f), _color - make_float3(0.004f));
_color = (_color * (6.2f *_color + make_float3(0.5f))) / (_color * (6.2f * _color + make_float3(1.7f)) + make_float3(0.06f));
return _color;
}

__DEVICE__ float Soft_Clip( float S, float softclip)
{
return S > softclip ? (-1.0f / ((S - softclip) / (1.0f - softclip) + 1.0f) + 1.0f) * (1.0f - softclip) + softclip : S;
}

__DEVICE__ void rgb_to_hsl( float r, float g, float b, float *h, float *s, float *l)
{
float min = _fminf(_fminf(r, g), b);
float max = _fmaxf(_fmaxf(r, g), b);
*l = r * 0.2126f + g * 0.7152f + b * 0.0722f;
float delta = max - min;
if (max != 0) {
*s = delta / max;
} else {
*s = 0;
*h = 0;
return;
}
if (delta == 0) {
*h = 0;
} else if (r == max) {
*h = (g - b) / delta;
} else if (g == max) {
*h = 2 + (b - r) / delta;
} else {
*h = 4 + (r - g) / delta;
}
*h *= 1.0f / 6;
if (*h < 0) {
*h += 1;
}
}

__DEVICE__ void hsl_to_rgb(float H, float S, float L, float *r, float *g, float *b)
{
float Q = L < 0.5f ? L * (1.0f + S) : L + S - L * S;
float P = 2.0f * L - Q;

float RH = H + 1.0f / 3.0f < 0.0f ? H + 1.0f / 3.0f + 1.0f :
H + 1.0f / 3.0f > 1.0f ? H + 1.0f / 3.0f - 1.0f : H + 1.0f / 3.0f;

float RR = RH < 1.0f / 6.0f ? P + (Q - P) * 6.0f * RH : 
RH < 1.0f / 2.0f ? Q : RH < 2.0f / 3.0f ? P + (Q - P) * (2.0f / 3.0f - RH) * 6.0f : P;

float GH = H < 0.0f ? H + 1.0f :
H > 1.0f ? H - 1.0f : H;

float GG = GH < 1.0f / 6.0f ? P + (Q - P) * 6.0f * GH :
GH < 1.0f / 2.0f ? Q : GH < 2.0f / 3.0f ? P + (Q - P) * (2.0f / 3.0f - GH) * 6.0f : P;

float BH = H - 1.0f / 3.0f < 0.0f ? H - 1.0f / 3.0f + 1.0f :
H - 1.0f / 3.0f > 1.0f ? H - 1.0f / 3.0f - 1.0f : H - 1.0f / 3.0f;

float BB = BH < 1.0f / 6.0f ? P + (Q - P) * 6.0f * BH :
BH < 1.0f / 2.0f ? Q : BH < 2.0f / 3.0f ? P + (Q - P) * (2.0f / 3.0f - BH) * 6.0f : P;  

*r = S == 0.0f ? L : RR;
*g = S == 0.0f ? L : GG;
*b = S == 0.0f ? L : BB;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
nudge = NUDGE;
frequency = FREQUENCY;
LOW_QUALITY = LOWQUALITY;
SOFT = 1.0f - SOFT;

float X = (float)p_X;
float Y = (float)p_Y;
X = X - _fmod(X, STEPS) + _floor(STEPS/2);
Y = Y - _fmod(Y, STEPS) + _floor(STEPS/2);
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
time = -TIME * 40 + 39.99f;

float2 resolution = make_float2(width, height) * 2.0f;
float2 XY = make_float2(X, Y) * 2.0f;
float2 uv = (XY / resolution);
float2 Res = (XY - 0.5f * resolution) / resolution.y;
Res = Res / (ZOOM + 0.1f);
float3 rd = normalize(make_float3(Res.x, Res.y, 1.0f));
float3 ro = make_float3(0.0f, 0.0f, -6.0f);

rotate(&rd.x, &rd.z, ROTATEy);
rotate(&ro.x, &ro.z, ROTATEy);

float ld=0.0f, td=0.0f, w=0.0f;
float d=1.0f, t=0.0f;
float h = 0.1f;
float4 sum = make_float4(0.0f);

float min_dist = 0.0f;
float max_dist = 0.0f;

if(RaySphereIntersect(ro, rd, &min_dist, &max_dist))
{
t = min_dist * step(t, min_dist) * SUN;
int loops = 86;
if (LOW_QUALITY)
loops = 56;
for (int i=0; i<loops; i++)
{
float3 pos = ro + t * rd;
if(td > 0.9f || d < 0.12f * t || t > 10.0f || sum.w > 0.99f || t > max_dist) break;

float d = map(pos);

if (BOTH)
d = uv.x < 0.5f ? _fabs(d) + 0.07f : d;
else if (LEFT)
d = _fabs(d) + 0.07f;

d = _fmaxf(d, 0.03f);

float3 ldst = make_float3(0.0f) - pos;
float lDist = _fmaxf(length(ldst), 0.001f);

float3 lightColor = make_float3(1.0f, 0.5f, 0.25f);

float3 bloom = lightColor / _expf(lDist * lDist * lDist * 0.08f) / 30.0f;
sum = sum + make_float4(bloom, 0.0f);

if (d < h) 
{
ld = h - d;
w = (1.0f - td) * ld;
td += w + 1.0f / 200.0f;

float4 col = make_float4( computeColor(td, lDist), td );
sum = sum + (sum.w * make_float4(sum.x, sum.y, sum.z, 0.0f) * 0.2f / lDist);	

col.w *= 0.2f;
col.x *= col.w;
col.y *= col.w;
col.z *= col.w;
sum = sum + col * (1.0f - sum.w);  
}

td += 1.0f / 70.0f;

if (DITHERING)
{
float2 uvd = Res;
d = _fabs(d) * (0.8f + 0.08f * noise(make_float3(uvd.y, -uvd.x + 0.5f * _sinf(4.0f * time + uvd.y * 4.0f), 1.0f)));
} 

if (LOW_QUALITY)
t += _fmaxf(d * 0.25f, 0.01f);
else
t += _fmaxf(d * 0.08f * _fmaxf(_fminf(length(ldst), d), 2.0f), 0.01f);
}

if (LOW_QUALITY)
sum = sum * (1.0f / _expf( ld * 0.2f ) * 0.9f);
else
sum = sum * (1.0f / _expf( ld * 0.2f ) * 0.8f);

//sum = CLAMP( sum, 0.0f, 1.0f );
//sum.x = Soft_Clip(sum.x, SOFT);
//sum.y = Soft_Clip(sum.y, SOFT);
//sum.z = Soft_Clip(sum.z, SOFT);

if (SOFT == 1.0f)
{
sum = CLAMP( sum, 0.0f, 1.0f );
} else {
sum.x = Soft_Clip(sum.x, SOFT);
sum.y = Soft_Clip(sum.y, SOFT);
sum.z = Soft_Clip(sum.z, SOFT);
/*
float h, s, l;
rgb_to_hsl(sum.x, sum.y, sum.z, &h, &s, &l);
l = Soft_Clip(l, SOFT);
hsl_to_rgb(h, s, l, &sum.x, &sum.y, &sum.z);
*/
}
sum.x = sum.x * sum.x * (3.0f - 2.0f * sum.x);
sum.y = sum.y * sum.y * (3.0f - 2.0f * sum.y);
sum.z = sum.z * sum.z * (3.0f - 2.0f * sum.z);
}

float3 COL = make_float3(0.0f);
if (TONEMAPPING)
COL = ToneMapFilmicALU(make_float3(sum.x, sum.y, sum.z) * 2.2f);
else
COL = make_float3(sum.x, sum.y, sum.z);

return COL;
}