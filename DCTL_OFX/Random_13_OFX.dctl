// Random 13 OFX DCTL

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(SCALE, Scale, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(PAN, Pan, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(TILT, Tilt, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(OFFSET, Offset, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ROTATEy, RotateY, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(ROTATEz, RotateZ, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(ROTATEx, RotateX, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(BKG1, Use Input Reflection, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(BKG2, Use Input Background, DCTLUI_CHECK_BOX, 1)

#define lightDirection		normalize( make_float3(-1.0f, -2.6f, 5.0f))

__DEVICE__ float time = 0;
__DEVICE__ float width = 0;
__DEVICE__ float height = 0;
__DEVICE__ float scale = 1;
__DEVICE__ float pan = 0;
__DEVICE__ float tilt = 0;
__DEVICE__ float offset = 0;
__DEVICE__ float rotateZ = 0;

__DEVICE__ __TEXTURE__ TexR;
__DEVICE__ __TEXTURE__ TexG;
__DEVICE__ __TEXTURE__ TexB;

__DEVICE__ bool Bkg1 = 0;

typedef struct
{
float3 r0, r1, r2;
} mat3;

__DEVICE__ mat3 make_mat3( float m00, float m01, float m02, 
float m10, float m11, float m12, float m20, float m21, float m22)
{
mat3 M;
M.r0 = make_float3(m00, m01, m02);
M.r1 = make_float3(m10, m11, m12);
M.r2 = make_float3(m20, m21, m22);
return M;
}

__DEVICE__ mat3 make_mat3(float3 A, float3 B, float3 C)
{
mat3 D;
D.r0 = A;
D.r1 = B;
D.r2 = C;
return D;
}

__DEVICE__ float3 multi(float3 A, mat3 B)
{
float3 C;
C.x = A.x * B.r0.x + A.y * B.r0.y + A.z * B.r0.z;
C.y = A.x * B.r1.x + A.y * B.r1.y + A.z * B.r1.z;
C.z = A.x * B.r2.x + A.y * B.r2.y + A.z * B.r2.z;
return C;
}

__DEVICE__ mat3 multi( mat3 A, mat3 B)
{
float r[3][3];
float a[3][3] =	{{A.r0.x, A.r0.y, A.r0.z},
{A.r1.x, A.r1.y, A.r1.z},
{A.r2.x, A.r2.y, A.r2.z}};
float b[3][3] =	{{B.r0.x, B.r0.y, B.r0.z},
{B.r1.x, B.r1.y, B.r1.z},
{B.r2.x, B.r2.y, B.r2.z}};

for( int i = 0; i < 3; ++i)
{
for( int j = 0; j < 3; ++j)
{
r[i][j] = 0.0f;
for( int k = 0; k < 3; ++k)
{
r[i][j] = r[i][j] + a[i][k] * b[k][j];
}
}
}
mat3 R = make_mat3(make_float3(r[0][0], r[0][1], r[0][2]), 
make_float3(r[1][0], r[1][1], r[1][2]), make_float3(r[2][0], r[2][1], r[2][2]));
return R;
}

__DEVICE__ float3 SIN( float3 A)
{
float3 B;
B.x = _sinf(A.x);
B.y = _sinf(A.y);
B.z = _sinf(A.z);
return B;
}

__DEVICE__ float3 mix(float3 A, float3 B, float C)
{
return A * (1.0f - C) + B * C;
}

__DEVICE__ float cubicIn( float t)
{
return t * t * t;
}

__DEVICE__ void rotate( float* ax, float* ay, float b)
{
float AX = *ax;
float AY = *ay;
float c = _cosf(b);
float s = _sinf(b);
*ax = AX * c - AY * s;
*ay = AX * s + AY * c;
}

__DEVICE__ mat3 cam3D( float rotateX, float rotateY, float rotateZ)
{
mat3 rot_x = make_mat3(1.0f, 0.0f, 0.0f, 0.0f, _cosf(rotateX), _sinf(rotateX), 0.0f, -_sinf(rotateX), _cosf(rotateX));
mat3 rot_y = make_mat3(_cosf(rotateY), 0.0f, _sinf(rotateY), 0.0f, 1.0f, 0.0f, -_sinf(rotateY), 0.0f, _cosf(rotateY));
mat3 rot_z = make_mat3(_cosf(rotateZ), _sinf(rotateZ), 0.0f, -_sinf(rotateZ), _cosf(rotateZ), 0.0f, 0.0f, 0.0f, 1.0f);
mat3 Cam = multi(multi(rot_y, rot_x), rot_z);
return Cam;
}

__DEVICE__ float sphere( float3 pos, float radius)
{
return length(pos) - radius;	
}

__DEVICE__ float3 mapP( float3 p )
{
p = p + 1.0f * SIN(  2.0f * make_float3(p.y,p.z,p.x) ) * cubicIn(_sinf(time)) * 0.5f;
p = p + 0.5f * SIN(  4.0f * make_float3(p.y,p.z,p.x) ) * cubicIn(_sinf(time)) * 0.5f;
return p;
}

__DEVICE__ float map( float3 pos)
{
float3 spherePos = mapP(pos);    
float s1 = sphere(spherePos, 1.6451f * scale);
return s1;
}

__DEVICE__ float3 computeNormal( float3 pos)
{
float2 eps = make_float2(0.01f, 0.0f);
return normalize(make_float3(
map(pos + make_float3(eps.x,eps.y,eps.y)) - map(pos - make_float3(eps.x,eps.y,eps.y)),
map(pos + make_float3(eps.y,eps.x,eps.y)) - map(pos - make_float3(eps.y,eps.x,eps.y)),
map(pos + make_float3(eps.y,eps.y,eps.x)) - map(pos - make_float3(eps.y,eps.y,eps.x))
));
}

__DEVICE__ float diffuse( float3 normal, float3 lightDir)
{
return _fmaxf(dot(normal, lightDir), 0.0f);
}

__DEVICE__ mat3 setCamera( float3 ro, float3 ta, float cr )
{
float3 cw = normalize(ta - ro);
float3 cp = make_float3(_sinf(cr), _cosf(cr), 0.0f);
float3 cu = normalize( cross(cw,cp) );
float3 cv = normalize( cross(cu,cw) );
return make_mat3( cu, cv, cw );
}

__DEVICE__ float specular( float3 normal, float3 dir) 
{
float3 h = normalize(normal - dir);
return _powf( _fmaxf( dot(h, normal), 0.0f), 50.0f);
}

__DEVICE__ float3 envLight( float3 normal, float3 dir)
{
float3 eye = dir * 1.0f;
float3 r = reflect( eye, normal );
rotate(&r.x, &r.y, rotateZ);
float m = 1.0f * _sqrtf( _powf( r.x, 2.0f ) + _powf( r.y, 2.0f ) + _powf( r.z + 1.0f, 2.0f ));
r = (r + 1.0f) * 0.5f;
r.y = (r.y - 0.5f) * 0.5f + 0.5f;
r.x = r.x * (pan + 1)/2;
r.y += tilt;
float XX = (r.x + offset) * width;
float Xx = XX > width ? XX - width : XX < 0 ? XX + width : XX;
int xx = (int)Xx;
float a = _tex2D(TexR, xx, (int)(height - r.y * height));
float b = _tex2D(TexG, xx, (int)(height - r.y * height));
float c = _tex2D(TexB, xx, (int)(height - r.y * height));
a = _powf(a, 0.4f);
b = _powf(b, 0.4f);
c = _powf(c, 0.4f);
float3 color = make_float3(a, b, c);
if (!Bkg1)
color = make_float3(0.3f, 0.5f, 0.3f);

return color;
}

__DEVICE__ float3 createColor(float3 pos, float3 normal, float3 dir, float3 lightDir)
{
float3 albedo = make_float3(0.5f, 0.5f, 0.5f);
float diff = diffuse(normal, lightDir);
float spec = specular(normal, lightDir);
float3 env = envLight(normal, dir);

float3 yo = (diff + spec + env) * albedo;
return (yo - 0.5f) * 1.5f + 0.5f;
}

__DEVICE__ float3 rgb( float3 color) 
{
return make_float3(color.x / 255.0f, color.y / 255.0f, color.z / 255.0f);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
float X = (float)p_X;
float Y = (float)p_Y;
width = (float)p_Width;
height = (float)p_Height;
Y = height - Y;
offset = OFFSET;
float XX = X + offset * width;
float Xx = XX > width ? XX - width : XX < 0 ? XX + width : XX;
int xx = (int)Xx;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
Bkg1 = BKG1;
scale = SCALE;
time = TIME * 20;
TexR = p_TexR;
TexG = p_TexG;
TexB = p_TexB;
pan = PAN;
tilt = TILT;
rotateZ = ROTATEz;
float3 RGB = make_float3(_tex2D(p_TexR, xx, p_Y), _tex2D(p_TexG, xx, p_Y), _tex2D(p_TexB, xx, p_Y));

float3 lightDir = lightDirection;
lightDir.x *= _sinf(time * 1.0f);
//lightDir.x -= pan/2;
//lightDir.y += tilt/4;

float2 uv = XY / resolution;
uv = -1.0f + uv * 2.0f;    
uv.x *= resolution.x / resolution.y;
uv.x -= pan * 2.5f;
uv.y -= tilt * 2;

float rx = ROTATEx;
float ry = ROTATEy;
float rz = rotateZ;

mat3 CAM = cam3D(rx, ry, rz);

float d;
bool hit = 0;
float3 ta = make_float3(0.0f);
float3 pos = make_float3(0.0f, 0.0f, -3.0f);
mat3 cam = setCamera(pos, ta, 0.0f);
float3 color = make_float3(0.0f, 0.0f, 0.0f);
float3 dir = multi( normalize(make_float3(uv, 1.0f)), cam);


pos = multi(pos, CAM);
dir = multi(dir, CAM);
lightDir = multi(lightDir, CAM);


for (int i = 0; i < 64; i++)
{
d = map(pos);
if (d < _powf(0.1f, 5.0f))
{       		
hit = 1;            
}
pos = pos + d * dir;
}

if(hit)
{
float3 normal = computeNormal(pos);
color = createColor(pos, normal, dir, lightDir);       
} else {

float3 col1 = rgb(make_float3(258.0f, 208.0f, 196.0f)) * 0.8f;
float3 col2 = rgb(make_float3(255.0f, 209.0f, 255.0f)) * 0.5f;
color = BKG2 ? RGB : mix(col1, col2, length(uv * 0.55f));
}

return color;
}


// Created by inigo quilez - iq/2018
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.


// This shader shows how to use the Cubemap pass to generate and cacache,
// a cubemap texture. Caching is totally optional, you can regenerate the 
// cubemap every frame if you want so.
//
// The signature of the cubemap renderer is:
//
// void mainCubemap( out vec4 fragColor,  in vec2 fragCoord, 
//                    in vec3 fragRayOri, in vec3 fragRayDir )
//
// where fragRayOri is the center of the cubemap - (0,0,0) by default,
// and fragRayDir is the ray direction for a given pixel

/*
float hash(vec3 p)  // replace this by something better
{
    p  = fract( p*0.3183099+.1 );
	p *= 17.0;
    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );
}

float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
	
    return -1.0+2.0*mix(mix(mix( hash(p+vec3(0,0,0)), 
                        hash(p+vec3(1,0,0)),f.x),
                   mix( hash(p+vec3(0,1,0)), 
                        hash(p+vec3(1,1,0)),f.x),f.y),
               mix(mix( hash(p+vec3(0,0,1)), 
                        hash(p+vec3(1,0,1)),f.x),
                   mix( hash(p+vec3(0,1,1)), 
                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);
}

float map( in vec3 q )
{
    float h = q.y;

    q *= 0.01*vec3(0.5,1.0,0.5);
    
	float f;
    f  = 0.500000*abs(noise( q )); q = q*2.02;
    f += 0.250000*abs(noise( q )); q = q*2.03;
    f += 0.125000*abs(noise( q )); q = q*2.01;
    f += 0.062500*abs(noise( q )); q = q*2.02;
    f += 0.031250*abs(noise( q )); q = q*2.03;
  //f += 0.015625*abs(noise( q ));
    f = -1.0 + 2.0*f;
    
    f = mix( f, -0.1, 1.0-smoothstep( h, 50.0, 60.0 ));
    f = mix( f, -0.1, 1.0-smoothstep( h, 250.0, 300.0 ));
    f += 0.17;

    return f;
}


vec3 sundir = normalize( vec3(-1.0,0.5,1.0) );

vec4 raymarch( in vec3 ro, in vec3 rd, in vec3 bgcol )
{
	vec4 sum = vec4(0.0);

	float t = (50.0-ro.y)/rd.y;
    
	if( t>0.0 )
    {
        for(int i=0; i<512; i++ )
        { 
            vec3  pos = ro + t*rd;
            float den = map( pos );
            if( den>0.001 )
            { 
                // lighting
                float dif = clamp( (den - map(pos+50.0*sundir))*1.0, 0.0, 1.0 ); 
                vec3 lin = vec3(0.5,0.7,0.9)*0.5 + vec3(1.0, 0.7, 0.5)*dif*5.0;
                vec4 col = vec4( mix( vec3(1.0,0.95,0.8), vec3(0.1,0.2,0.3), sqrt(clamp(den,0.0,1.0) )), den );
                col.xyz *= lin;
                col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.0005*t) );
                col.a *= 0.1;
                // front to back blending    
                col.rgb *= col.a;
                sum = sum + col*(1.0-sum.a);
                // early skip
                if( sum.a > 0.99 || pos.y>300.0) break;
            }
            t += 2.0;
        }
    }
    
    return clamp( sum, 0.0, 1.0 );
}


void mainCubemap( out vec4 fragColor,  in vec2 fragCoord, 
                  in vec3  fragRayOri, in vec3 fragRayDir )
{
    // cache
    if( iFrame>1 )
    {
        discard;
    }
    
    //---------------------------------
    
    // dome    
    vec3 col = vec3(0.5,0.7,0.8) - max(0.0,fragRayDir.y)*0.4;
    
    // sun
    float s = pow( clamp( dot(fragRayDir,sundir),0.0,1.0),32.0 );
    col += s*vec3(1.0,0.7,0.4)*3.0;

    // ground
    float t = (-5.0-fragRayOri.y)/fragRayDir.y;
    if( t>0.0 )
    {
        vec3 pos = fragRayOri + t*fragRayDir;
        
        vec3 gcol = vec3(0.2,0.1,0.08)*0.9;
        
        float f = 0.50*noise( pos );
              f+= 0.25*noise( pos*1.9 );
        gcol *= 0.5 + 0.5*f;

        col = mix( gcol, col, 1.0-exp(-0.0005*t) );
    }


    // clouds
    vec4 res = raymarch( fragRayOri, fragRayDir, col );
    col = col*(1.0-res.w) + res.xyz;

    
    fragColor = vec4( col, 1.0 );
}
*/