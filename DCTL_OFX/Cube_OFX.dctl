// Cube OFX DCTL

DEFINE_UI_PARAMS(ROTATEy, RotateY, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(ROTATEz, RotateZ, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(ROTATEx, RotateX, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(p_OffsetX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(p_OffsetY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(p_Zoom, Zoom, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(p_Scale, Scale Cube, DCTLUI_SLIDER_FLOAT, 1, 0, 3, 0.001)
DEFINE_UI_PARAMS(p_Space, Scale segments, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(p_Cubes, Segments, DCTLUI_SLIDER_INT, 1, 1, 5, 1)
DEFINE_UI_PARAMS(TIME, Transform, DCTLUI_SLIDER_FLOAT, 0, 0, 20, 0.001)
DEFINE_UI_PARAMS(p_Hue1, Left Hue, DCTLUI_SLIDER_FLOAT, 0, 0, 360, 0.01)
DEFINE_UI_PARAMS(p_Hue2, Front Hue, DCTLUI_SLIDER_FLOAT, 120, 0, 360, 0.01)
DEFINE_UI_PARAMS(p_Hue3, Top Hue, DCTLUI_SLIDER_FLOAT, 240, 0, 360, 0.01)
DEFINE_UI_PARAMS(p_Bright, Brightness, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(p_Back, Background, DCTLUI_SLIDER_INT, 1, 0, 2, 1)

#include "DCTL_Functions.h"

#define MAX_STEPS 96
#define MIN_DIST 0.001f
#define NORMAL_SMOOTHNESS 0.02f

__DEVICE__ float time = 0;
__DEVICE__ float SCALE = 0;
__DEVICE__ float SPACE = 0;
__DEVICE__ int CUBES = 1;
__DEVICE__ float HUE1 = 0;
__DEVICE__ float HUE2 = 0;
__DEVICE__ float HUE3 = 0;
__DEVICE__ float BRIGHT = 0;
__DEVICE__ float BACK = 0;

__DEVICE__ float3 HSV_2_RGB( float H, float S, float V)
{
float r, g, b;
if (S == 0) {
r = g = b = V;
return;
}
H *= 6;
int i = (int)_floor(H);
float f = H - i;
i = (i >= 0) ? (i % 6) : (i % 6) + 6;
float p = V * (1 - S);
float q = V * (1 - S * f);
float t = V * (1 - S * (1.0f - f));
r = i == 0 ? V : i == 1 ? q : i == 2 ? p : i == 3 ? p : i == 4 ? t : V;
g = i == 0 ? t : i == 1 ? V : i == 2 ? V : i == 3 ? q : i == 4 ? p : p;
b = i == 0 ? p : i == 1 ? p : i == 2 ? t : i == 3 ? V : i == 4 ? V : q;
return make_float3(r, g, b);
}

__DEVICE__ float Union(float a, float b)
{
return _fminf(a, b);
}

__DEVICE__ float Sphere( float radius, float3 position)
{
return length(position) - radius;
}

__DEVICE__ float Box( float radius, float3 position)
{
return _fmaxf(_fmaxf(_fabs(position.x), _fabs(position.y)), _fabs(position.z)) - radius;
}

__DEVICE__ float Scene( float3 position)
{
float map = -Sphere(24, position);

float animTime = _fmod(time, 10);

float xScale = smoothstep(1, 1.5f, animTime) - smoothstep(6, 6.5f, animTime);  
float zScale = smoothstep(2, 2.5f, animTime) - smoothstep(7, 7.5f, animTime);
float yScale = smoothstep(3, 3.5f, animTime) - smoothstep(8, 8.5f, animTime);

for(int i = -CUBES; i <= CUBES;i++)
{
for(int j = -CUBES; j <= CUBES;j++)
{
for(int k = -CUBES; k <= CUBES;k++)
{
float3 offset = make_float3( i, j, k) * SCALE;

offset.x *= 1.0f + xScale;
offset.y *= 1.0f + yScale;
offset.z *= 1.0f + zScale;
map = Union(map, Box(SPACE, position + offset));
}
}
}
return map;
}

__DEVICE__ float3 Normal( float3 position)
{
float3 offset = make_float3(NORMAL_SMOOTHNESS, 0, 0);
float3 normal = make_float3
(
Scene(position - offset) - Scene(position + offset),
Scene(position - make_float3(offset.z, offset.x, offset.y)) - Scene(position + make_float3(offset.z, offset.x, offset.y)),
Scene(position - make_float3(offset.y, offset.z, offset.x)) - Scene(position + make_float3(offset.y, offset.z, offset.x))
);
return normalize(normal);
}

__DEVICE__ float3 RayMarch(float3 origin, float3 direction)
{
float hitDist = 0;
for(int i = 0; i < MAX_STEPS; i++)
{
float sceneDist = Scene(origin + direction * hitDist);
hitDist += sceneDist;

if(sceneDist < MIN_DIST)
{
break;
}
}
return origin + direction * hitDist;
}

__DEVICE__ float3 Shade( float3 position, float3 normal, float3 rayOrigin, float3 rayDirection, float2 uv, float3 background)
{
float3 color = make_float3(0);
//Face Colors
float grad = 1 - _sqrtf((1 - uv.x) * (1 - uv.x) + (1 - uv.y) * (1 - uv.y)) / 1.8f;
grad = _clampf(grad * BRIGHT, 0, 1);
float3 leftColor = HSV_2_RGB(HUE1, 1, 0.75f) * grad;
float3 frontColor = HSV_2_RGB(HUE2, 1, 0.75f) * grad;
float3 topColor = HSV_2_RGB(HUE3, 1, 0.75f) * grad;
color = mix(color, leftColor,  _fabs( dot(normal, make_float3(1,0,0) ) ) );
color = mix(color, frontColor, _fabs( dot(normal, make_float3(0,0,1) ) ) );
color = mix(color, topColor,   _fabs( dot(normal, make_float3(0,1,0) ) ) );
//Background
float environ = BACK == 2 ? 220 : 22;
color = mix(color, background, step(environ, length(position)));

return color;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
time = TIME * 10;

float2 aspect = make_float2(width / height, 1);
float2 uv = XY / height;
float2 UV = XY / resolution;
uv.x -= p_OffsetX;
uv.y -= p_OffsetY;

SCALE = p_Scale;
SPACE = p_Space / 2;
CUBES = p_Cubes;
HUE1 = p_Hue1 / 360;
HUE2 = p_Hue2 / 360;
HUE3 = p_Hue3 / 360;
BRIGHT = p_Bright;
if (p_Zoom < 1) p_Zoom = 1 - (1 - p_Zoom) * 0.6f;
p_Zoom = -8 / p_Zoom;

BACK = p_Back;

float3 rayOrigin = make_float3(0, 0, p_Zoom);
float3 rayDirection = normalize(make_float3(uv - aspect / 2, 1));

rotate(&rayOrigin.z, &rayOrigin.x, ROTATEy + 0.66f);
rotate(&rayDirection.z, &rayDirection.x, ROTATEy + 0.66f);
rotate(&rayOrigin.x, &rayOrigin.y, ROTATEz);
rotate(&rayDirection.x, &rayDirection.y, ROTATEz);
rotate(&rayOrigin.y, &rayOrigin.z, ROTATEx + 0.66f);
rotate(&rayDirection.y, &rayDirection.z, ROTATEx + 0.66f);

float3 scenePosition = RayMarch(rayOrigin, rayDirection);
float3 RGB = make_float3(p_R, p_G, p_B);
float3 background = BACK == 0 ? RGB : make_float3(0.1f);
float3 outColor = Shade(scenePosition,Normal(scenePosition),rayOrigin,rayDirection, UV, background);

return outColor;
}