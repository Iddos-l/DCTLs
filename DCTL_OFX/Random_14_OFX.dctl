// Random 14 OFX DCTL

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(OCTAVES, Octaves, DCTLUI_SLIDER_INT, 5, 1, 10, 1)
DEFINE_UI_PARAMS(SCALE, Gain, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)

__DEVICE__ float time = 0;
__DEVICE__ int NUM_OCTAVES = 1;

typedef struct
{
float2 r0, r1;
} mat2;

__DEVICE__ mat2 make_mat2(float A1, float A2, float B1, float B2)
{
mat2 C;
C.r0 = make_float2(A1, A2);
C.r1 = make_float2(B1, B2);
return C;
}

__DEVICE__ float2 multi(mat2 B, float2 A)
{
float2 C;
C.x = A.x * B.r0.x + A.y * B.r0.y;
C.y = A.x * B.r1.x + A.y * B.r1.y;
return C;
}

__DEVICE__ float fract(float A)
{
float B;
B = A - _floor(A);
return B;
}

__DEVICE__ float3 fract(float3 A)
{
float3 B;
B.x = A.x - _floor(A.x);
B.y = A.y - _floor(A.y);
B.z = A.z - _floor(A.z);
return B;
}

__DEVICE__ float mix(float A, float B, float C)
{
return A * (1.0f - C) + B * C;
}

__DEVICE__ float3 mix(float3 A, float3 B, float C)
{
return A * (1.0f - C) + B * C;
}

__DEVICE__ float3 floor( float3 A)
{
return make_float3(_floor(A.x), _floor(A.y), _floor(A.z));
}

__DEVICE__ float random(float3 pos)
{
return fract(_sinf(dot(pos, make_float3(23452.9898f, 72358.233f, 243.5651f))) * 438.5453123f);
}

__DEVICE__ float noise(float3 pos)
{
float3 i = floor(pos);
float3 f = fract(pos);
float v000 = random(i + make_float3(0.0f, 0.0f, 0.0f));
float v100 = random(i + make_float3(1.0f, 0.0f, 0.0f));
float v010 = random(i + make_float3(0.0f, 1.0f, 0.0f));
float v110 = random(i + make_float3(1.0f, 1.0f, 0.0f));
float v001 = random(i + make_float3(0.0f, 0.0f, 1.0f));
float v101 = random(i + make_float3(1.0f, 0.0f, 1.0f));
float v011 = random(i + make_float3(0.0f, 1.0f, 1.0f));
float v111 = random(i + make_float3(1.0f, 1.0f, 1.0f));
float3 u = f * f * (3.0 - 2.0 * f);

float v00 = mix(v000, v001, u.z);
float v01 = mix(v010, v011, u.z);
float v10 = mix(v100, v101, u.z);
float v11 = mix(v110, v111, u.z);

float v0 = mix(v00, v01, u.y);
float v1 = mix(v10, v11, u.y);

float v = mix(v0, v1, u.x);

return v;
}

__DEVICE__ float fbm(float2 pos)
{
float v = 0.0f;
float a = 0.5f;
float2 shift = make_float2(100.0f);
mat2 rot = make_mat2(_cosf(0.5f), _sinf(0.5f), -_sinf(0.5f), _cosf(0.5f));
for (int i = 0; i < NUM_OCTAVES; i++) {
v += a * noise(make_float3(pos, time));
pos = multi(rot, pos) * 2.0f + shift;
a *= 0.5f;
}
return v;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
time = TIME * 10;
NUM_OCTAVES = OCTAVES;
SCALE *= 0.7f;

float2 p = (XY * 2.0f - resolution) / _fminf(resolution.x, resolution.y);
float2 r = make_float2(time/10.0f, 0.0f);
float f = fbm(p + r);
float3 color = mix(
make_float3(1.201961f, 1.219608f, 1.666667f),
make_float3(1.266667f, 1.266667f, 1.498039f),
_clampf((f * f) * 4.0f, 0.0f, 1.0f)
);

color = (f *f * f + 0.6f * f * f + 0.5f * f) * color * SCALE;

return color;
}