// Fractal Cell OFX DCTL

DEFINE_UI_PARAMS(TIME, Engage, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(SPEED, Speed, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(SCALE, Zoom, DCTLUI_SLIDER_FLOAT, 0, 0, 2, 0.001)
DEFINE_UI_PARAMS(msX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(msY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ROTATE, Rotate, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(LIGHT, Light Modultaion, DCTLUI_CHECK_BOX, 0)

#include "DCTL_Functions.h"

__DEVICE__ float time = 0;
__DEVICE__ float paramSpeed = 0;

__DEVICE__ float field( float3 p, float s)
{
float strength = 7 + 0.03f * _logf(1.e-6 + fract(_sinf(time * paramSpeed / 100) * 4373.11f));
float accum = s / 4;
float prev = 0;
float tw = 0;
for (int i = 0; i < 26; ++i) {
float mag = dot(p, p);
p = ABS(p) / mag + make_float3(-0.5f, -0.4f, -1.5f);
float w = _expf(-i / 7.0f);
accum += w * _expf(-strength * _powf(_fabs(mag - prev), 2.2f));
tw += w;
prev = mag;
}
return _fmaxf(0, 5 * accum / tw - 0.7f);
}

__DEVICE__ float field2( float3 p, float s)
{
float strength = 7 + 0.03f * _logf(1.e-6 + fract(_sinf(time * paramSpeed / 100) * 4373.11f));
float accum = s / 4;
float prev = 0;
float tw = 0;
for (int i = 0; i < 18; ++i) {
float mag = dot(p, p);
p = ABS(p) / mag + make_float3(-0.5f, -0.4f, -1.5f);
float w = _expf(-i / 7.0f);
accum += w * _expf(-strength * _powf(_fabs(mag - prev), 2.2f));
tw += w;
prev = mag;
}
return _fmaxf(0, 5 * accum / tw - 0.7f);
}

__DEVICE__ float3 nrand3(float2 co)
{
float3 a = fract( _cosf( co.x * 8.3e-3 + co.y ) * make_float3(1.3e5, 4.7e5, 2.9e5) );
float3 b = fract( _sinf( co.x * 0.3e-3 + co.y ) * make_float3(8.1e5, 1.0e5, 0.1e5) );
float3 c = mix(a, b, 0.5f);
return c;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
time = TIME * 20;
paramSpeed = SPEED * 10;

float2 UV = 2 * XY / resolution - 1;
float2 UVS = UV * resolution / _fmaxf(width, height);
rotate(&UVS.x, &UVS.y, ROTATE);
UVS.x -= msX;
UVS.y -= msY;
UVS = UVS / (SCALE + 1);

float3 p = make_float3(UVS.x / 4, UVS.y / 4, 0) + make_float3(1, -1.3f, 0);
p = p + 0.2f * make_float3(_sinf(time * paramSpeed / 16), _sinf(time * paramSpeed / 12), _sinf(time * paramSpeed / 128));

float4 freqs;
if(LIGHT)
{
freqs.x = _tex2D(p_TexR, (int)(0.01f * width), (int)(height * 0.25f) );
freqs.y = _tex2D(p_TexR, (int)(0.07f * width), (int)(height * 0.25f) );
freqs.z = _tex2D(p_TexR, (int)(0.15f * width), (int)(height * 0.25f) );
freqs.w = _tex2D(p_TexR, (int)(0.3f * width), (int)(height * 0.25f) );
} else {
freqs = make_float4(0.5f);
}

float t = field(p, freqs.z);
float v = (1 - _expf((_fabs(UV.x) - 1) * 6)) * (1 - _expf((_fabs(UV.y) - 1) * 6));

float3 p2 = make_float3(UVS.x / (4 + _sinf(time * paramSpeed * 0.11f)* 0.2f + 0.2f + _sinf(time * paramSpeed * 0.15f) * 0.3f + 0.4f), 
UVS.y / (4 + _sinf(time * paramSpeed * 0.11f)* 0.2f + 0.2f + _sinf(time * paramSpeed * 0.15f) * 0.3f + 0.4f), 1.5f) + make_float3(2, -1.3f, -1);
p2 = p2 + 0.25f * make_float3(_sinf(time * paramSpeed / 16), _sinf(time * paramSpeed / 12), _sinf(time * paramSpeed / 128));
float t2 = field2(p2, freqs.w);
float4 c2 = mix(0.4f, 1, v) * make_float4(1.3f * t2 * t2 * t2 , 1.8f * t2 * t2, t2 * freqs.x, t2);

float2 seed = make_float2(p.x, p.y) * 2;
seed.x = _floor(width * seed.x);
seed.y = _floor(width * seed.y);
float3 rnd = nrand3( seed );
float3 starcolor = make_float3(_powf(rnd.y, 40));

float2 seed2 = make_float2(p2.x, p2.y) * 2;
seed2.x = _floor(width * seed2.x);
seed2.y = _floor(width * seed2.y);
float3 rnd2 = nrand3( seed2 );
starcolor = starcolor + _powf(rnd2.y, 40);

float3 RGB;
RGB = mix(freqs.w - 0.3f, 1, v) * make_float3(1.5f * freqs.z * t * t * t , 1.2f * freqs.y * t * t, freqs.w * t) + make_float3(c2.x, c2.y, c2.z) + starcolor;

return RGB;
}