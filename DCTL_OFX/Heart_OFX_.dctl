// Heart OFX DCTL

DEFINE_UI_PARAMS(TIME, Animate, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(SCALE, Scale, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(msX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(msY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ROTATEy, Rotate, DCTLUI_SLIDER_FLOAT, 0, -6, 6, 0.001)
DEFINE_UI_PARAMS(AA, Anti-alias, DCTLUI_SLIDER_INT, 0, 0, 2, 1)

#include "DCTL_Functions.h"

__DEVICE__ float time = 0.0f;
__DEVICE__ float rotateY = 0.0f;

__DEVICE__ float hash1( float n)
{
return fract(_sinf(n) * 43758.5453123f);
}

__DEVICE__ float3 forwardSF( float i, float n) 
{
float phi = 2.0f * PI * fract(i / PHI);
float zi = 1.0f - (2.0f * i + 1.0f) / n;
float sinTheta = _sqrtf( 1.0f - zi * zi);
return make_float3( _cosf(phi) * sinTheta, _sinf(phi) * sinTheta, zi);
}

__DEVICE__ float almostIdentity( float x, float m, float n)
{
if(x > m) return x;
float a = 2.0f * n - m;
float b = 2.0f * m - 3.0f * n;
float t = x / m;
return (a * t + b) * t * t + n;
}

__DEVICE__ float2 map( float3 q)
{
q = q * 100.0f;
float2 res = make_float2(q.y, 2.0f);
float r = 15.0f;
q.y -= r;
float temp = 0.5f + 0.5f * _sinf(6.28318f * time + q.y / 25.0f);
float ani = _powf(temp, 4.0f);
q = q * (1.0f - 0.2f * make_float3(1.0f, 0.5f, 1.0f) * ani);
q.y -= 1.5f * ani;
float x = _fabs(q.x);
x = almostIdentity(x, 1.0f, 0.5f);

float y = q.y;
float z = q.z;
y = 4.0f + y * 1.2f - x * _sqrtf(_fmaxf((20.0f - x) / 15.0f, 0.0f));
z *= 2.0f - y / 15.0f;
float d = _sqrtf(x * x + y * y + z * z) - r;
d /= 3.0f;
if( d < res.x ) res = make_float2(d, 1.0f);
res.x /= 100.0f;
return res;
}

__DEVICE__ float2 intersect( float3 ro, float3 rd)
{
float maxd = 1.0f;
float2 res = make_float2(0.0f);
float t = 0.2f;
for( int i = 0; i < 300; i++ )
{
float2 h = map(ro + rd * t);
if( (h.x < 0.0f) || (t > maxd) ) break;
t += h.x;
res = make_float2(t, h.y);
}
if( t > maxd ) res = make_float2(-1.0f);
return res;
}

__DEVICE__ float3 calcNormal( float3 pos)
{
float3 eps1 = make_float3(0.005f, 0.0f, 0.0f);
float3 eps2 = make_float3(0.0f, 0.005f, 0.0f);
float3 eps3 = make_float3(0.0f, 0.0f, 0.005f);

return normalize( make_float3(
map(pos + eps1).x - map(pos - eps1).x,
map(pos + eps2).x - map(pos - eps2).x,
map(pos + eps3).x - map(pos - eps3).x ) );
}

__DEVICE__ float calcAO( float3 pos, float3 nor)
{
float ao = 0.0f;
for( int i = 0; i < 64; i++ )
{
float3 ap = forwardSF( float(i), 64.0f );
ap = ap * (sign( dot(ap, nor) ) * hash1(float(i)));
ao += _clampf( map( pos + nor * 0.01f + ap * 0.2f ).x * 20.0f, 0.0f, 1.0f);
}
ao /= 64.0f;
return _clampf(ao, 0.0f, 1.0f);
}

__DEVICE__ float3 render( float2 p)
{
float an = 0.5f * (time + 2.0f);
float3 ro = make_float3(0.4f * _sinf(an), 0.25f, 0.4f * _cosf(an));
float3 ta = make_float3(0.0f, 0.15f, 0.0f);
float3 ww = normalize( ta - ro );
float3 uu = normalize( cross(ww, make_float3(0.0f, 1.0f, 0.0f) ) );
float3 vv = normalize( cross(uu, ww) );
float3 rd = normalize( p.x * uu + p.y * vv + 1.7 * ww );
float3 col = make_float3(1.0f, 0.82f, 0.9f);

rotate(&rd.x, &rd.z, rotateY);
rotate(&ro.x, &ro.z, rotateY);
float2 res = intersect(ro, rd);
float t = res.x;

if( t > 0.0f )
{
float3 pos = ro + t * rd;
float3 nor = calcNormal(pos);
float3 ref = reflect(rd, nor);
float fre = _clampf(1.0f + dot(nor, rd), 0.0f, 1.0f);
float occ = calcAO(pos, nor); occ = occ * occ;

if( res.y < 1.5f )
{
col = make_float3(0.9f, 0.02f, 0.01f);
col = col * 0.72f + 0.2f * fre * make_float3(1.0f, 0.8f, 0.2f);

float3 lin = 4.0f * make_float3(0.7f, 0.8f, 1.0f) * (0.5f + 0.5f * nor.y) * occ;
lin = lin + (0.5f * fre * make_float3(1.0f, 1.0f, 1.0f) * (0.6f + 0.4f * occ));
col = col * lin;
col = col + (4.0f * make_float3(0.7f, 0.8f, 1.0f) * smoothstep(0.0f, 0.4f, ref.y) * (0.06f + 0.94f * _powf(fre, 5.0f)) * occ);
col = POW(col, make_float3(0.4545f));
}
else
{
col = col * (_clampf(_sqrtf(occ * 1.8f), 0.0f, 1.0f));
}
}
col = CLAMP(col, 0.0f, 1.0f);
return col;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;
float2 resolution = make_float2(width, height);
float2 XY = make_float2(X, Y);
time = TIME * 10.0f;
rotateY = ROTATEy;
AA += 1;
float3 col = make_float3(0.0f);
float2 p = (-resolution + 2.0f * XY) / resolution.y;
p.x -= msX;
p.y -= msY;
p = p / SCALE;

if (AA > 1){
for( int m = 0; m < AA; m++ )
for( int n = 0; n < AA; n++ )
{
float2 px = XY + make_float2(float(m), float(n)) / float(AA);
p = (-resolution + 2.0f * px) / resolution.y;
p.x -= msX;
p.y -= msY;
p = p / SCALE;
col = col + render(p);    
}
col = col / float(AA*AA);
} else {
col = render(p);
}   

float2 q = XY / resolution;
col = col * (0.2f + 0.8f * _powf(16.0f * q.x * q.y * (1.0f - q.x) * (1.0f - q.y), 0.2f));
return col;
}