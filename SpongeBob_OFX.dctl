// SpongeBob OFX DCTL

DEFINE_UI_PARAMS(time, Loop, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(msX, Horizontal, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(msY, Vertical, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(SCALE, Zoom, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(RotateY, RotateY, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(RotateZ, RotateZ, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(RotateX, RotateX, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)

#include "DCTL_Functions.h"

__DEVICE__ float hash(float n)
{
return fract(_sinf(n) * 4358.5453f);
}

__DEVICE__ float noise(float3 x)
{
float3 p = floor(x);
float3 f = fract(x);

f = f * f * (f * -2.0f + 3.0f);
float n = p.x + p.y * 57.0f + p.z * 113.0f;

return mix(
mix(
mix(hash(n), hash(n + 1.0f), f.x),
mix(hash(n + 57.0f), hash(n + 58.0f), f.x),
f.y),
mix(
mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
mix(hash(n + 170.0f), hash(n + 171.0f), f.x),
f.y),
f.z);
}

__DEVICE__ float len(float3 p, float l)
{
p = POW(ABS(p), make_float3(l));
return _powf(p.x + p.y + p.z, 1.0f/l);
}

__DEVICE__ float smin(float a, float b, float k)
{
float res = _expf(-k * a) + _expf(-k * b);
return -_logf(res) / k;
}

__DEVICE__ float dBox(float3 p, float3 b)
{
float3 d = ABS(p) - b;
return _fminf(_fmaxf(d.x, _fmaxf(d.y, d.z)), 0) + length(MAX(d, 0));
}

__DEVICE__ float2 dSegment(float3 p, float3 a, float3 b)
{
float3 pa = p - a;
float3 ba = b - a;

float h = _clampf(dot(pa, ba) / dot(ba, ba), 0, 1);

return make_float2(length(pa - ba * h), h);
}

__DEVICE__ float2 dSegment15(float3 p, float3 a, float3 b)
{
float3 pa = p - a;
float3 ba = b - a;

float h = _clampf(dot(pa, ba) / dot(ba, ba), 0, 1);

return make_float2(len(pa - ba * h, 15), h);
}

__DEVICE__ float2 dSpongeBob(float3 p)
{
float res = 0;
// body
float b = dBox(p - make_float3(0, 0.5f, 0), make_float3(1, 1.5f, 0.5f) / 2) - 0.02f;
b += 0.02f * smoothstep(0.4f, 1, noise(p * 10)) * smoothstep(0.1f, 0.11f, p.y);
b -= 0.75f * smoothstep(0.2f, 1, p.y) * smoothstep(-0.13f, -0.12f, -p.y);

// belt
float3 q = p;
q.y *= 18;
q.z *= 1.9f;
float e = len(q + make_float3(0, 2.3f, 0), 15) - 0.54f;
b = _fminf(b, e);

// tie
q = p;
q.x *= 0.4f;
float2 s = dSegment15(q + make_float3(0, -0.09f, -0.28f), make_float3(0, -0.23f, 0), make_float3(0));
float r = 0.04f - 0.02f * smoothstep(0.5f, 0.8f, s.y) - 0.04f * (1 - s.y);
if(s.x - r < b) res = 1;
b = _fminf(b, s.x - r);

// collar
p.x = -_fabs(p.x);
q = p;
s = dSegment15(q + make_float3(0, -0.09f, -0.25f), make_float3(0), make_float3(-0.15f, 0, 0));
r = 0.01f + 0.045f * s.y * smoothstep(-0.2f, -0.0f, -q.y);
if(s.x - r < b) res = 0;
b = smin(b, s.x - r, 70);

// arms
q = p;
rotate(&q.x, &q.y, 0.4f * q.y);
s = dSegment(q + make_float3(0.63f, -0.3f, 0), make_float3(0, -0.5f, 0), make_float3(0.05f, 0, 0));
r = 0.034f + 0.05f * smoothstep(0.85f, 0.88f, s.y) + 0.015f * smoothstep(-0.1f, 0, -s.y);
if(s.x - r < b) res = 0;
b = _fminf(b, s.x - r);

// hands
q = p;
q.z *= 1.9f;
q = q + make_float3(0.61f, 0.26f, 0);
q.x *= 2.7f;
e = length(q) - 0.08f;
if(e < b) res = 0;
b = smin(b, e, 100);

// fingers
q = p;
q = q + make_float3(0.61f, 0.26f, 0);
q = make_float3(q.z, q.y, q.x);
float f = 100;
s = dSegment(q, make_float3(0, -0.01f, 0.04f), make_float3(0, -0.08f, 0.07f));
r = 0.01f;
rotate(&q.x, &q.y, 0.3f * smoothstep(0.12f, 0.17f, -q.y));
f = _fminf(f, s.x - r);
s = dSegment(q, make_float3(0, -0.07f, -0.02f), make_float3(0, -0.16f, -0.04f));
f = _fminf(f, s.x - r);
s = dSegment(q, make_float3(0, -0.07f, -0.0f), make_float3(0, -0.16f, -0.0f));
f = _fminf(f, s.x - r);
s = dSegment(q, make_float3(0, -0.07f, 0.02f), make_float3(0, -0.16f, 0.04f));
f = _fminf(f, s.x - r);

b = smin(f, b, 60);

// legs
s = dSegment(p + make_float3(0.25f, 0.3f, 0), make_float3(0), make_float3(0, -0.65f, 0));
r = 0.05f;
r -= 0.02f * smoothstep(0.2f, 0.21f, s.y);
r += 0.015f * smoothstep(0.7f, 0.715f, s.y);
if(s.x - r < b) res = 0;
b = _fminf(b, s.x - r); 

// shoes
q = p;
q.y *= 1 + 0.05f * smoothstep(0.05f, 0.2f, p.z);
q.z *= 0.6f;
e = length(q + make_float3(0.25f, 0.98f, -0.05f)) - 0.08f;
if(s.x - r < b) res = 0;
b = smin(b, e, 60);

// nose
q = p;
rotate(&q.z, &q.y, -0.25f * p.z * p.z);
s = dSegment(q + make_float3(0, -0.6f, 0), make_float3(0), make_float3(0, 0, 0.6f));
b = _fminf(b, s.x - 0.035f);

// eyes
q = p;
q.y *= 0.75f;
q.z *= 1.5f;
q = q + make_float3(0.15f, -0.6f, -0.3f);
e = length(q) - 0.2f - 0.02f * smoothstep(0.56f, 0.58f, p.y - 0.39f);
if(e < b) res = 2;
b = _fminf(b, e);
e = length(q + make_float3(0, 0, -0.14f)) - 0.07f;
if(e < b) res = 3;
b = _fminf(b, e);

// mouth
q = p;
rotate(&q.x, &q.y, 0.45f * q.z);
s = dSegment(q + make_float3(0, -0.4f, -0.27f), make_float3(-0.25f, 0, 0), make_float3(0.2f, 0, 0));
r =  0.03f - 0.02f * smoothstep(0, 0.1f, s.y);
if(s.x - r < b) res = 1.0f;
b = _fminf(b, s.x - r);

// teeth
e = dBox(p + make_float3(0.042f, -0.36f, -0.27f), make_float3(0.03f, 0.05f, 0.01f));
if(e < b) res = 2;
b = _fminf(b, e);

return make_float2(b, res); 
}

__DEVICE__ float2 map(float3 p)
{
float2 g = make_float2(p.y + 1, -2);
float2 sb = dSpongeBob(p);
return g.x < sb.x ? g : sb;
}

__DEVICE__ float2 march(float3 ro, float3 rd)
{
float t = 0;
float m = -4;

for(int i = 0; i < 150; i++) {
float2 h = map(ro + rd * t);
if(_fabs(h.x) < 0.0001f || t >= 10) break;
t += h.x * 0.5f;
m = h.y;
}

return make_float2(t, m);
}

__DEVICE__ float3 normal(float3 p)
{
float2 h = make_float2(0.001f, 0);
float3 n = make_float3(
map(p + make_float3(h.x, h.y, h.y)).x - map(p - make_float3(h.x, h.y, h.y)).x,
map(p + make_float3(h.y, h.x, h.y)).x - map(p - make_float3(h.y, h.x, h.y)).x,
map(p + make_float3(h.y, h.y, h.x)).x - map(p - make_float3(h.y, h.y, h.x)).x
);
return normalize(n);
}

__DEVICE__ float shadow(float3 p, float3 l)
{
float res = 1;
float t = 0.002f;

for(int i = 0; i < 200; i++) {
float h = map(p + l * t).x;
if(_fabs(h) < 0 || t >= 6) break;
t += h;
res = _fminf(res, 16 * h/t);
}
return _clampf(res, 0, 1);
}

__DEVICE__ float ao(float3 p, float3 n)
{
float s = 0.004f;
float t = s;

float o = 0;
float w = 1;

for(int i = 0; i < 10; i++) {
float h = map(p + n * t).x;

o += (t - h) * w;
w *= 0.95f;

t += s;
}

return 1 - _clampf(o, 0, 1);
}

__DEVICE__ mat3 camera(float3 eye, float3 lat) {
float3 ww = normalize(lat - eye);
float3 vv = normalize(cross(make_float3(0, 1, 0), ww));
float3 uu = normalize(cross(ww, vv));

return make_mat3(vv, uu, ww);
}

__DEVICE__ float3 material(float3 p, float m)
{
float3 mat = make_float3(2, 1.938f, 0.129f);

if(p.y < -0.86f) {
mat = make_float3(0.2f);
} else if(p.y < -0.75f) {
mat = mix(make_float3(2, 0, 0), make_float3(2), 1.0f - smoothstep(-0.79f, -0.78f, p.y));
} else if(p.y >= -0.45f && p.y < -0.15f && _fabs(p.x) < 0.55f) {
mat = make_float3(1, 0.2f, 0);
} else if(p.y >= -0.17f && p.y < -0.095f && _fabs(p.x) < 0.55f) {
mat = make_float3(0.1f);
float a = _atan2f(p.z, p.x);
a = _fmod(a, 0.4f);
mat = mix(mat, make_float3(1, 0.2f, 0), smoothstep(0.1f, 0.101f, a));
} else if(p.y >= -0.095f && p.y < 0.12f && _fabs(p.x) < 0.55f) {
mat = make_float3(2);
if(m == 1.0f) mat = make_float3(2, 0, 0);
} else if(p.y > 0.3f && p.y < 0.48f && _fabs(p.x) > 0.5f && _fabs(p.z) < 0.08f) {
mat = make_float3(2);
} else if(m == 2 && p.y < 0.96f) {
mat = make_float3(2);
} else if(m == 3) {
p.x = -_fabs(p.x) + 0.15f;
p.y -= 0.8f;
mat = mix(make_float3(0.3f, 0.5f, 1), make_float3(0.2f), 1 - smoothstep(0.0f, 0.001f, length(make_float2(p.x, p.y)) - 0.02f));
}

return mat;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float X = (float)p_X;
float Y = (float)p_Y;
float width = (float)p_Width;
float height = (float)p_Height;
Y = height - Y;

float2 uv;
uv.x = -1 + 2 * (X/width);
uv.y = -1 + 2 * (Y/height);
uv.x *= width/height;
uv.x -= msX * 2;
uv.y -= msY * 2;
uv = uv / (SCALE + 0.2f) * 2;

float3 col = make_float3(0.2f, 0.34f, 0.7f);
float an = time * 10 + 1.5f;

float3 ro = make_float3(_cosf(an), 0.9f/3, -_sinf(-1)) * 2.5f;
float3 rd = multi(normalize(make_float3(uv.x, uv.y, 1.97f)), camera(ro, make_float3(0)));

rotate(&ro.x, &ro.z, RotateY * -5);
rotate(&rd.x, &rd.z, RotateY * -5);

rotate(&ro.x, &ro.y, RotateZ * -2);
rotate(&rd.x, &rd.y, RotateZ * -2);

rotate(&ro.y, &ro.z, RotateX/2);
rotate(&rd.y, &rd.z, RotateX/2);

float2 i = march(ro, rd);

if(i.x < 10) {
float3 pos = ro + rd*i.x;
float3 nor = normal(pos);
float3 ref = reflect(rd, nor);

float3 sli = normalize(make_float3(0.8f, 0.7f, 0.6f));
float3 gli = normalize(make_float3(0, -0.7f, 0));
float3 bli = make_float3(-sli.x, sli.y, -sli.z);

float amb = _clampf(0.5f + 0.5f * nor.y, 0, 1);
float gif = _clampf(dot(gli, nor), 0, 1);
float sif = _clampf(dot(sli, nor), 0, 1);
float bac = _clampf(0.3f + 0.7f * dot(bli, nor), 0, 1);
float spe = _powf(_clampf(dot(sli, ref), 0, 1), 8);
float fre = _powf(_clampf(1 + dot(rd, nor), 0, 1), 2);

float sha = shadow(pos, sli);
float occ = ao(pos, nor);

col = 0.2f * amb * make_float3(0.2f, 0.34f, 0.7f);
col = col + (0.3f * gif * make_float3(1, 1, 1) * sha);
col = col + (0.7f * sif * make_float3(1, 0.97f, 0.85f) * sha);
col = col + (0.1f * bac * make_float3(1, 0.97f, 0.85f));

if(pos.y > -0.99f) {
col = col * material(pos, i.y);
} else {
col = col * make_float3(0.8f, 0.8f, 0.5f);
}

col = col + (0.4f * spe * make_float3(1, 0.97f, 0.85f) * sif * sha);
col = col + (0.2f * fre * make_float3(1, 1, 1));

col = col * make_float3(occ);
}
col = POW(col, make_float3(0.454545f));
col = col.x + col.y + col.z < 0.01f ? make_float3(0.48f, 0.6f, 0.85f) : col;

return col;
}