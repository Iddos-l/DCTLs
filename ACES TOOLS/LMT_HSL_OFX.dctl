// LMT HSL Adjustments OFX DCTL

// Input is ACEScct
// Output is ACEScct

DEFINE_UI_PARAMS(REDHUE, Red Hue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(REDSAT, Red Sat, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(REDLUMA, Red Luma, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(YELLOWHUE, Yellow Hue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(YELLOWSAT, Yellow Sat, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(YELLOWLUMA, Yellow Luma, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(GREENHUE, Green Hue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(GREENSAT, Green Sat, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(GREENLUMA, Green Luma, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(CYANHUE, Cyan Hue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(CYANSAT, Cyan Sat, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(CYANLUMA, Cyan Luma, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(BLUEHUE, Blue Hue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(BLUESAT, Blue Sat, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(BLUELUMA, Blue Luma, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MAGENTAHUE, Magenta Hue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MAGENTASAT, Magenta Sat, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MAGENTALUMA, Magenta Luma, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(ACESCCT, ACEScct, DCTLUI_CHECK_BOX, 1)


typedef struct
{
float2 red;
float2 green;
float2 blue;
float2 white;
} Chromaticities;

typedef struct
{
float3 c0, c1, c2;
} mat3;

typedef struct
{
float4 c0, c1, c2, c3;
} mat4;

__CONSTANT__ float X_BRK = 0.0078125f;
__CONSTANT__ float Y_BRK = 0.155251141552511f;
__CONSTANT__ float A = 10.5402377416545f;
__CONSTANT__ float B = 0.0729055341958355f;
__CONSTANT__ float sqrt3over4 = 0.433012701892219f;
__CONSTANT__ Chromaticities AP0 = { {0.7347f, 0.2653f}, {0.0f, 1.0f}, {0.0001f, -0.077f}, {0.32168f, 0.33767f} };
__CONSTANT__ Chromaticities AP1 = { {0.713f, 0.293f}, {0.165f, 0.83f}, {0.128f, 0.044f}, {0.32168f, 0.33767f} };
__CONSTANT__ Chromaticities REC709_PRI = { {0.64f, 0.33f}, {0.3f, 0.6f}, {0.15f, 0.06f}, {0.3127f, 0.329f} };

#define pi					3.14159265358979323846264338327950288f
#define AP0_2_XYZ_MAT		RGBtoXYZ_m4( AP0, 1.0f)
#define XYZ_2_AP0_MAT		XYZtoRGB_m4( AP0, 1.0f)
#define AP1_2_XYZ_MAT		RGBtoXYZ_m4( AP1, 1.0f)
#define XYZ_2_AP1_MAT		XYZtoRGB_m4( AP1, 1.0f)
#define AP0_2_AP1_MAT		mult_f44_f44( AP0_2_XYZ_MAT, XYZ_2_AP1_MAT)
#define AP1_2_AP0_MAT		mult_f44_f44( AP1_2_XYZ_MAT, XYZ_2_AP0_MAT)
#define AP1_RGB2Y			make_float3( AP1_2_XYZ_MAT.c0.y, AP1_2_XYZ_MAT.c1.y, AP1_2_XYZ_MAT.c2.y)
#define RGB_2_YAB_MAT		make_mat3( make_float3(1.0f/3.0f, 1.0f/2.0f, 0.0f), make_float3(1.0f/3.0f, -1.0f/4.0f, sqrt3over4), make_float3(1.0f/3.0f, -1.0f/4.0f, -sqrt3over4))
#define REC709_2_XYZ_MAT	RGBtoXYZ( REC709_PRI, 1.0f)   
#define REC709_RGB2Y		make_float3( REC709_2_XYZ_MAT.c0.y, REC709_2_XYZ_MAT.c1.y, REC709_2_XYZ_MAT.c2.y)

__DEVICE__ Chromaticities make_chromaticities(float2 A, float2 B, float2 C, float2 D)
{
Chromaticities E;
E.red = A;
E.green = B;
E.blue = C;
E.white = D;
return E;
}

__DEVICE__ float fract_f( float A)
{
float B;
B = A - _floor(A);
return B;
}

__DEVICE__ float2 add_f2_f( float2 A, float B)
{
float2 C;
C.x = A.x + B;
C.y = A.y + B;
return C;
}

__DEVICE__ float dot_f2_f( float2 A, float2 B)
{
float C = A.x * B.x + A.y * B.y;
return C;
}

__DEVICE__ float3 clamp_f3( float3 in, float Min, float Max)
{
float3 out;
out.x = _clampf(in.x, Min, Max);
out.y = _clampf(in.y, Min, Max);
out.z = _clampf(in.z, Min, Max);
return out;
}

__DEVICE__ float3 max_f3( float3 in, float Max)
{
float3 out;
out.x = _fmaxf(in.x, Max);
out.y = _fmaxf(in.y, Max);
out.z = _fmaxf(in.z, Max);
return out;
}

__DEVICE__ mat3 make_mat3( float3 A, float3 B, float3 C)
{
mat3 D;
D.c0 = A;
D.c1 = B;
D.c2 = C;
return D;
}

__DEVICE__ mat4 make_mat4( float4 A, float4 B, float4 C, float4 D)
{
mat4 E;
E.c0 = A;
E.c1 = B;
E.c2 = C;
E.c3 = D;
return E;
}

__DEVICE__ float4 make_float4_f3_f( float3 A, float B)
{
return make_float4(A.x, A.y, A.z, B);
}

__DEVICE__ mat4 make_mat4_f33_f(mat3 A, float B)
{
mat4 C;
C.c0 = make_float4_f3_f(A.c0, 0.0f);
C.c1 = make_float4_f3_f(A.c1, 0.0f);
C.c2 = make_float4_f3_f(A.c2, 0.0f);
C.c3 = make_float4(0.0f, 0.0f, 0.0f, B);
return C;
}

__DEVICE__ float3 mult_f3_f33( float3 X, mat3 A)
{
float r[3];
float x[3] = {X.x, X.y, X.z};
float a[3][3] =	{{A.c0.x, A.c0.y, A.c0.z}, {A.c1.x, A.c1.y, A.c1.z}, {A.c2.x, A.c2.y, A.c2.z}};
for( int i = 0; i < 3; ++i)
{
r[i] = 0.0f;
for( int j = 0; j < 3; ++j)
{
r[i] = r[i] + x[j] * a[j][i];
}
}
return make_float3(r[0], r[1], r[2]);
}

__DEVICE__ mat3 mult_f33_f33( mat3 A, mat3 B)
{
float r[3][3];
float a[3][3] =	{{A.c0.x, A.c0.y, A.c0.z}, {A.c1.x, A.c1.y, A.c1.z}, {A.c2.x, A.c2.y, A.c2.z}};
float b[3][3] =	{{B.c0.x, B.c0.y, B.c0.z}, {B.c1.x, B.c1.y, B.c1.z}, {B.c2.x, B.c2.y, B.c2.z}};
for( int i = 0; i < 3; ++i)
{
for( int j = 0; j < 3; ++j)
{
r[i][j] = 0.0f;
for( int k = 0; k < 3; ++k)
{
r[i][j] = r[i][j] + a[i][k] * b[k][j];
}
}
}
mat3 R = make_mat3(make_float3(r[0][0], r[0][1], r[0][2]), 
make_float3(r[1][0], r[1][1], r[1][2]), make_float3(r[2][0], r[2][1], r[2][2]));
return R;
}

__DEVICE__ float3 mult_f3_f44( float3 X, mat4 A)
{
float r[3];
float x[3] = {X.x, X.y, X.z};
float a[4][4] =	{{A.c0.x, A.c0.y, A.c0.z, A.c0.w},
{A.c1.x, A.c1.y, A.c1.z, A.c1.w},
{A.c2.x, A.c2.y, A.c2.z, A.c2.w},
{A.c3.x, A.c3.y, A.c3.z, A.c3.w}};
for( int i = 0; i < 3; ++i)
{
r[i] = 0.0f;
for( int j = 0; j < 3; ++j)
{
r[i] = r[i] + x[j] * a[j][i];
}
r[i] = r[i] + a[3][i];
}
float s = 1.0f / (x[0] * a[0][3] + x[1] * a[1][3] + x[2] * a[2][3] + a[3][3]);
for( int k = 0; k < 3; ++k)
{
r[k] = r[k] * s;
}
return make_float3(r[0], r[1], r[2]);
}

__DEVICE__ mat3 mult_f_f33( float f, mat3 A)
{
float r[3][3];
float a[3][3] =	{{A.c0.x, A.c0.y, A.c0.z}, {A.c1.x, A.c1.y, A.c1.z}, {A.c2.x, A.c2.y, A.c2.z}};
for( int i = 0; i < 3; ++i )
{
for( int j = 0; j < 3; ++j )
{
r[i][j] = f * a[i][j];
}
}
mat3 R = make_mat3(make_float3(r[0][0], r[0][1], r[0][2]), 
make_float3(r[1][0], r[1][1], r[1][2]), make_float3(r[2][0], r[2][1], r[2][2]));
return R;
}

__DEVICE__ mat4 mult_f44_f44( mat4 A, mat4 B)
{
float r[4][4];
float a[4][4] =	{{A.c0.x, A.c0.y, A.c0.z, A.c0.w},
{A.c1.x, A.c1.y, A.c1.z, A.c1.w},
{A.c2.x, A.c2.y, A.c2.z, A.c2.w},
{A.c3.x, A.c3.y, A.c3.z, A.c3.w}};
float b[4][4] =	{{B.c0.x, B.c0.y, B.c0.z, B.c0.w},
{B.c1.x, B.c1.y, B.c1.z, B.c1.w},
{B.c2.x, B.c2.y, B.c2.z, B.c2.w},
{B.c3.x, B.c3.y, B.c3.z, B.c3.w}};
for( int i = 0; i < 4; ++i)
{
for( int j = 0; j < 4; ++j)
{
r[i][j] = 0.0f;
for( int k = 0; k < 4; ++k)
{
r[i][j] = r[i][j] + a[i][k] * b[k][j];
}
}
}
mat4 R = make_mat4(make_float4(r[0][0], r[0][1], r[0][2], r[0][3]), 
make_float4(r[1][0], r[1][1], r[1][2], r[1][3]), make_float4(r[2][0], r[2][1], r[2][2], r[2][3]),
make_float4(r[3][0], r[3][1], r[3][2], r[3][3]));
return R;
}

__DEVICE__ mat3 invert_f33( mat3 A)
{
mat3 R;
float result[3][3];
float a[3][3] =	{{A.c0.x, A.c0.y, A.c0.z}, {A.c1.x, A.c1.y, A.c1.z}, {A.c2.x, A.c2.y, A.c2.z}};
float det = a[0][0] * a[1][1] * a[2][2]
+ a[0][1] * a[1][2] * a[2][0]
+ a[0][2] * a[1][0] * a[2][1]
- a[2][0] * a[1][1] * a[0][2]
- a[2][1] * a[1][2] * a[0][0]
- a[2][2] * a[1][0] * a[0][1];
if( det != 0.0f )
{
result[0][0] = a[1][1] * a[2][2] - a[1][2] * a[2][1];
result[0][1] = a[2][1] * a[0][2] - a[2][2] * a[0][1];
result[0][2] = a[0][1] * a[1][2] - a[0][2] * a[1][1];
result[1][0] = a[2][0] * a[1][2] - a[1][0] * a[2][2];
result[1][1] = a[0][0] * a[2][2] - a[2][0] * a[0][2];
result[1][2] = a[1][0] * a[0][2] - a[0][0] * a[1][2];
result[2][0] = a[1][0] * a[2][1] - a[2][0] * a[1][1];
result[2][1] = a[2][0] * a[0][1] - a[0][0] * a[2][1];
result[2][2] = a[0][0] * a[1][1] - a[1][0] * a[0][1];
R = make_mat3(make_float3(result[0][0], result[0][1], result[0][2]), 
make_float3(result[1][0], result[1][1], result[1][2]), make_float3(result[2][0], result[2][1], result[2][2]));
return mult_f_f33( 1.0f / det, R);
}
R = make_mat3(make_float3(1.0f, 0.0f, 0.0f), 
make_float3(0.0f, 1.0f, 0.0f), make_float3(0.0f, 0.0f, 1.0f));
return R;
}

__DEVICE__ mat3 transpose_f33( mat3 A)
{
mat3 B;
B.c0 = make_float3(A.c0.x, A.c1.x, A.c2.x);
B.c1 = make_float3(A.c0.y, A.c1.y, A.c2.y);
B.c2 = make_float3(A.c0.z, A.c1.z, A.c2.z);
return B;
}

__DEVICE__ float cubic_basis_shaper( float x, float w)
{
float M[4][4] = { {-1.0f/6.0f, 3.0f/6.0f, -3.0f/6.0f, 1.0f/6.0f}, {3.0f/6.0f, -1.0f, 3.0f/6.0f, 0.0f},
{-3.0f/6.0f, 0.0f, 3.0f/6.0f, 0.0f}, {1.0f/6.0f, 4.0f/6.0f, 1.0f/6.0f, 0.0f} };
float knots[5] = {-w/2.0f, -w/4.0f, 0.0f, w/4.0f, w/2.0f};
float y = 0.0f;
if ((x > knots[0]) && (x < knots[4])) {  
float knot_coord = (x - knots[0]) * 4.0f/w;  
int j = knot_coord;
float t = knot_coord - j;
float monomials[4] = { t * t * t, t * t, t, 1.0f };
if ( j == 3) {
y = monomials[0] * M[0][0] + monomials[1] * M[1][0] + monomials[2] * M[2][0] + monomials[3] * M[3][0];
} else if ( j == 2) {
y = monomials[0] * M[0][1] + monomials[1] * M[1][1] + monomials[2] * M[2][1] + monomials[3] * M[3][1];
} else if ( j == 1) {
y = monomials[0] * M[0][2] + monomials[1] * M[1][2] + monomials[2] * M[2][2] + monomials[3] * M[3][2];
} else if ( j == 0) {
y = monomials[0] * M[0][3] + monomials[1] * M[1][3] + monomials[2] * M[2][3] + monomials[3] * M[3][3];
} else {
y = 0.0f;
}
}
return y * 3.0f/2.0f;
}

__DEVICE__ float center_hue( float hue, float centerH)
{
float hueCentered = hue - centerH;
if (hueCentered < -180.0f) hueCentered = hueCentered + 360.0f;
else if (hueCentered > 180.0f) hueCentered = hueCentered - 360.0f;
return hueCentered;
}

__DEVICE__ float uncenter_hue( float hueCentered, float centerH)
{
float hue = hueCentered + centerH;
if (hue < 0.0f) hue = hue + 360.0f;
else if (hue > 360.0f) hue = hue - 360.0f;
return hue;
}

__DEVICE__ float interpolate1D (float2 table[], int Size, float p)
{
if( p <= table[0].x ) return table[0].y;
if( p >= table[Size-1].x ) return table[Size-1].y;
for( int i = 0; i < Size - 1; ++i )
{
if( table[i].x <= p && p < table[i+1].x )
{
float s = (p - table[i].x) / (table[i+1].x - table[i].x);
return table[i].y * ( 1 - s ) + table[i+1].y * s;
}
}
return 0.0f;
}

__DEVICE__ mat3 RGBtoXYZ( Chromaticities N)
{
mat3 M = make_mat3(make_float3(N.red.x, N.red.y, 1.0f - (N.red.x + N.red.y)),
make_float3(N.green.x, N.green.y, 1.0f - (N.green.x + N.green.y)),
make_float3(N.blue.x, N.blue.y, 1.0f - (N.blue.x + N.blue.y)));
float3 wh = make_float3(N.white.x / N.white.y, 1.0f, (1.0f - (N.white.x + N.white.y)) / N.white.y);
wh = mult_f3_f33(wh, invert_f33(M));
mat3 WH =  make_mat3(make_float3(wh.x, 0.0f, 0.0f), 
make_float3(0.0f, wh.y, 0.0f), make_float3(0.0f, 0.0f, wh.z));
M = mult_f33_f33(WH, M);
return M;
}

__DEVICE__ mat4 RGBtoXYZ_m4( Chromaticities N, float W)
{
mat3 A = RGBtoXYZ(N);
mat4 M = make_mat4_f33_f(A, W);
return M;
}

__DEVICE__ mat3 XYZtoRGB( Chromaticities N)
{
mat3 M = invert_f33(RGBtoXYZ(N));
return M;
}

__DEVICE__ mat4 XYZtoRGB_m4( Chromaticities N, float W)
{
mat3 A = XYZtoRGB(N);
mat4 M = make_mat4_f33_f(A, W);
return M;
}

__DEVICE__ float lin_to_ACEScc( float in)
{
if (in <= 0.0f)
return -0.3584474886f;
else if (in < _powf(2.0f, -15.0f))
return (_log2f( _powf(2.0f, -16.0f) + in * 0.5f) + 9.72f) / 17.52f;
else
return (_log2f(in) + 9.72f) / 17.52f;
}

__DEVICE__ float3 ACES_to_ACEScc( float3 ACES)
{
ACES = max_f3( ACES, 0.0f);
float3 lin_AP1 = mult_f3_f44( ACES, AP0_2_AP1_MAT);
float3 out;
out.x = lin_to_ACEScc(lin_AP1.x);
out.y = lin_to_ACEScc(lin_AP1.y);
out.z = lin_to_ACEScc(lin_AP1.z);
return out;
}

__DEVICE__ float ACEScc_to_lin( float in)
{
if (in < -0.3013698630f)
return (_powf( 2.0f, in * 17.52f - 9.72f) - _powf( 2.0f, -16.0f)) * 2.0f;
else
return _powf( 2.0f, in * 17.52f - 9.72f);
}

__DEVICE__ float3 ACEScc_to_ACES( float3 ACEScc)
{
float3 lin_AP1;
lin_AP1.x = ACEScc_to_lin(ACEScc.x);
lin_AP1.y = ACEScc_to_lin(ACEScc.y);
lin_AP1.z = ACEScc_to_lin(ACEScc.z);
float3 ACES = mult_f3_f44(lin_AP1, AP1_2_AP0_MAT);
return ACES;  
}

__DEVICE__ float lin_to_ACEScct( float in)
{
if (in <= X_BRK)
return A * in + B;
else
return (_log2f(in) + 9.72f) / 17.52f;
}

__DEVICE__ float ACEScct_to_lin( float in)
{
if (in > Y_BRK)
return _powf( 2.0f, in * 17.52f - 9.72f);
else
return (in - B) / A;
}

__DEVICE__ float3 ACES_to_ACEScct( float3 in)
{
float3 ap1_lin = mult_f3_f44(in, AP0_2_AP1_MAT);
float3 acescct;
acescct.x = lin_to_ACEScct(ap1_lin.x);
acescct.y = lin_to_ACEScct(ap1_lin.y);
acescct.z = lin_to_ACEScct(ap1_lin.z);
return acescct;
}

__DEVICE__ float3 ACEScct_to_ACES( float3 in)
{
float3 ap1_lin;
ap1_lin.x = ACEScct_to_lin( in.x);
ap1_lin.y = ACEScct_to_lin( in.y);
ap1_lin.z = ACEScct_to_lin( in.z);
return mult_f3_f44( ap1_lin, AP1_2_AP0_MAT);
}

__DEVICE__ float3 rgb_2_yab( float3 rgb)
{
float3 yab = mult_f3_f33( rgb, RGB_2_YAB_MAT);
return yab;
}

__DEVICE__ float3 yab_2_rgb( float3 yab)
{
float3 rgb = mult_f3_f33( yab, invert_f33(RGB_2_YAB_MAT));
return rgb;
}

__DEVICE__ float3 yab_2_ych(float3 yab)
{
float3 ych = yab;
float yo = yab.y * yab.y + yab.z * yab.z;
ych.y = _sqrtf(yo);
ych.z = _atan2f(yab.z, yab.y) * (180.0f / pi);
if (ych.z < 0.0f) ych.z += 360.0f;
return ych;
}

__DEVICE__ float3 ych_2_yab( float3 ych ) 
{
float3 yab;
yab.x = ych.x;
float h = ych.z * (pi / 180.0f);
yab.y = ych.y * _cosf(h);
yab.z = ych.y * _sinf(h);
return yab;
}

__DEVICE__ float3 rgb_2_ych( float3 rgb) 
{
return yab_2_ych(rgb_2_yab(rgb));
}

__DEVICE__ float3 ych_2_rgb( float3 ych) 
{
return yab_2_rgb(ych_2_yab(ych));
}

__DEVICE__ float3 HSL( float3 ych, float centerH, float widthH, float hueShift, float satShift, float lumShift)
{
if(ych.y < 0.02f) return ych;
float3 new_ych = ych;
float centeredHue = center_hue( ych.z, centerH);
float f_H = cubic_basis_shaper( centeredHue, widthH);
float old_hue = centeredHue;
float new_hue = centeredHue + hueShift * 45.0f;
float2 table[2] = { {0.0f, old_hue}, {1.0f, new_hue} };
float blended_hue = interpolate1D( table, 2, f_H);
if (f_H > 0.0f){
new_ych.z = uncenter_hue( blended_hue, centerH);
satShift = satShift * 0.5f + 1.0f;
new_ych.y = ych.y * satShift;
lumShift = lumShift * 0.1f + 1.0f;
new_ych.x = _powf(ych.x, 1.0f/lumShift);
}
return new_ych;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float3 aces = make_float3(p_R, p_G, p_B);
aces = ACESCCT ? ACEScct_to_ACES(aces) : ACEScc_to_ACES(aces);
aces = max_f3(aces, 0.0f);
float3 ych = rgb_2_ych(aces);
ych = HSL(ych, 0.0f, 60.0f, REDHUE, REDSAT, REDLUMA);
ych = HSL(ych, 60.0f, 60.0f, YELLOWHUE, YELLOWSAT, YELLOWLUMA);
ych = HSL(ych, 120.0f, 90.0f, GREENHUE, GREENSAT, GREENLUMA);
ych = HSL(ych, 180.0f, 90.0f, CYANHUE, CYANSAT, CYANLUMA);
ych = HSL(ych, 240.0f, 60.0f, BLUEHUE, BLUESAT, BLUELUMA);
ych = HSL(ych, 300.0f, 60.0f, MAGENTAHUE, MAGENTASAT, MAGENTALUMA);
aces = ych_2_rgb(ych);
aces = ACESCCT ? ACES_to_ACEScct(aces) : ACES_to_ACEScc(aces);
return aces;
}