// LMT Hue vs Luma OFX DCTL

// Input is ACEScct
// Output is ACEScct

DEFINE_UI_PARAMS(RED, Red, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(YELLOW, Yellow, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(GREEN, Green, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(CYAN, Cyan, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(BLUE, Blue, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(MAGENTA, Magenta, DCTLUI_SLIDER_FLOAT, 0, -1, 1, 0.001)
DEFINE_UI_PARAMS(LUMM, Luma Limiter, DCTLUI_SLIDER_FLOAT, 0, -2, 2, 0.001)
DEFINE_UI_PARAMS(SATT, Saturation Limiter, DCTLUI_SLIDER_FLOAT, 0, -2, 2, 0.001)
DEFINE_UI_PARAMS(BELLCURVE, Bell Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(CHART, Display Hue Chart, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(ALPHA, View Alpha, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(ACESCCT, ACEScct, DCTLUI_CHECK_BOX, 1)

__CONSTANT__ float X_BRK = 0.0078125f;
__CONSTANT__ float Y_BRK = 0.155251141552511f;
__CONSTANT__ float A = 10.5402377416545f;
__CONSTANT__ float B = 0.0729055341958355f;

__DEVICE__ float3 clamp_f3( float3 in, float Min, float Max)
{
float3 out;
out.x = _clampf(in.x, Min, Max);
out.y = _clampf(in.y, Min, Max);
out.z = _clampf(in.z, Min, Max);
return out;
}

__DEVICE__ float3 pow_f3( float3 a, float b) {
float3 out;
out.x = _powf(a.x, b);out.y = _powf(a.y, b);out.z = _powf(a.z, b);
return out;
}

__DEVICE__ float ACEScct_to_lin( float in) {
if (in > Y_BRK)
return _powf( 2.0f, in * 17.52f - 9.72f);
else
return (in - B) / A;
}

__DEVICE__ float3 ACEScct_to_lin_f3( float3 in) {
float3 ap1_lin;
ap1_lin.x = ACEScct_to_lin( in.x);ap1_lin.y = ACEScct_to_lin( in.y);ap1_lin.z = ACEScct_to_lin( in.z);
return ap1_lin;
}

__DEVICE__ float ACEScc_to_lin( float in) {
if (in < -0.3013698630f)
return (_powf( 2.0f, in * 17.52f - 9.72f) - _powf( 2.0f, -16.0f)) * 2.0f;
else
return _powf( 2.0f, in * 17.52f - 9.72f);
}

__DEVICE__ float3 ACEScc_to_lin_f3( float3 in) {
float3 ap1_lin;
ap1_lin.x = ACEScc_to_lin( in.x);ap1_lin.y = ACEScc_to_lin( in.y);ap1_lin.z = ACEScc_to_lin( in.z);
return ap1_lin;
}

__DEVICE__ float lin_to_ACEScct( float in) {
if (in <= X_BRK)
return A * in + B;
else
return (_log2f(in) + 9.72f) / 17.52f;
}

__DEVICE__ float3 lin_to_ACEScct_f3( float3 in) {
float3 ap1_lin;
ap1_lin.x = lin_to_ACEScct( in.x);ap1_lin.y = lin_to_ACEScct( in.y);ap1_lin.z = lin_to_ACEScct( in.z);
return ap1_lin;
}

__DEVICE__ float lin_to_ACEScc( float in) {
if (in <= 0.0f)
return -0.3584474886f;
else if (in < _powf(2.0f, -15.0f))
return (_log2f( _powf(2.0f, -16.0f) + in * 0.5f) + 9.72f) / 17.52f;
else
return (_log2f(in) + 9.72f) / 17.52f;
}

__DEVICE__ float3 lin_to_ACEScc_f3( float3 in) {
float3 ap1_lin;
ap1_lin.x = lin_to_ACEScc( in.x);ap1_lin.y = lin_to_ACEScc( in.y);ap1_lin.z = lin_to_ACEScc( in.z);
return ap1_lin;
}

__DEVICE__ float bt1886_f( float V, float gamma, float Lw, float Lb) {
float a = _powf( _powf( Lw, 1.0f/gamma) - _powf( Lb, 1.0f/gamma), gamma);
float b = _powf( Lb, 1.0f/gamma) / ( _powf( Lw, 1.0f/gamma) - _powf( Lb, 1.0f/gamma));
float L = a * _powf( _fmaxf( V + b, 0.0f), gamma);
return L;
}

__DEVICE__ float3 bt1886_f_f3( float3 V, float gamma, float Lw, float Lb) {
float3 L;
L.x = bt1886_f( V.x, gamma, Lw, Lb);L.y = bt1886_f( V.y, gamma, Lw, Lb);L.z = bt1886_f( V.z, gamma, Lw, Lb);
return L;
}

__DEVICE__ float bt1886_r( float L, float gamma, float Lw, float Lb) {
float a = _powf( _powf( Lw, 1.0f/gamma) - _powf( Lb, 1.0f/gamma), gamma);
float b = _powf( Lb, 1.0f/gamma) / ( _powf( Lw, 1.0f/gamma) - _powf( Lb, 1.0f/gamma));
float V = _powf( _fmaxf( L / a, 0.0f), 1.0f/gamma) - b;
return V;
}

__DEVICE__ float3 bt1886_r_f3( float3 L, float gamma, float Lw, float Lb) {
float3 V;
V.x = bt1886_r( L.x, gamma, Lw, Lb);V.y = bt1886_r( L.y, gamma, Lw, Lb);V.z = bt1886_r( L.z, gamma, Lw, Lb);
return V;
}

__DEVICE__ float3 ACEScct_to_Rec709( float3 aces) {
float3 rgb;
aces = ACEScct_to_lin_f3(aces);
rgb.x = aces.x * 1.70508f - aces.y * 0.624233f - aces.z * 0.080846f;
rgb.y = aces.x * (-0.129701f) + aces.y * 1.138469f - aces.z * 0.008768f;
rgb.z = aces.x * (-0.024166f) - aces.y * 0.124614 + aces.z * 1.148781f;
rgb = bt1886_r_f3(rgb, 2.4f, 1.0f, 0.0f);
return rgb;
}

__DEVICE__ float3 ACEScc_to_Rec709( float3 aces) {
float3 rgb;
aces = ACEScc_to_lin_f3(aces);
rgb.x = aces.x * 1.70508f - aces.y * 0.624233f - aces.z * 0.080846f;
rgb.y = aces.x * (-0.129701f) + aces.y * 1.138469f - aces.z * 0.008768f;
rgb.z = aces.x * (-0.024166f) - aces.y * 0.124614 + aces.z * 1.148781f;
rgb = bt1886_r_f3(rgb, 2.4f, 1.0f, 0.0f);
return rgb;
}

__DEVICE__ float3 Rec709_to_ACEScct( float3 rgb) {
float3 aces;
rgb = bt1886_f_f3(rgb, 2.4f, 1.0f, 0.0f);
aces.x = rgb.x * 0.613083f + rgb.y * 0.341167f + rgb.z * 0.04575f;
aces.y = rgb.x * 0.070004f + rgb.y * 0.918063f + rgb.z * 0.011934f;
aces.z = rgb.x * 0.020491f + rgb.y * 0.106764f + rgb.z * 0.872745f;
aces = lin_to_ACEScct_f3(aces);
return aces;
}

__DEVICE__ float3 Rec709_to_ACEScc( float3 rgb) {
float3 aces;
rgb = bt1886_f_f3(rgb, 2.4f, 1.0f, 0.0f);
aces.x = rgb.x * 0.613083f + rgb.y * 0.341167f + rgb.z * 0.04575f;
aces.y = rgb.x * 0.070004f + rgb.y * 0.918063f + rgb.z * 0.011934f;
aces.z = rgb.x * 0.020491f + rgb.y * 0.106764f + rgb.z * 0.872745f;
aces = lin_to_ACEScc_f3(aces);
return aces;
}

__DEVICE__ float bellCurve( float c, float w, float x) {
x = _fabs(x - c);
if( x > w ) return x;
x /= w;
return 1.0f - x * x * (3.0f - 2.0f * x);
}

__DEVICE__ float3 HSV_to_RGB(float H, float S, float V) {
float r, g, b;
if (S == 0.0f){
r = g = b = V;
} else {
H *= 6.0f;
int i = _floor(H);
float f = H - i;
i = (i >= 0) ? (i % 6) : (i % 6) + 6;
float p = V * (1.0f - S);
float q = V * (1.0f - S * f);
float t = V * (1.0f - S * (1.0f - f));
r = i == 0 ? V : i == 1 ? q : i == 2 ? p : i == 3 ? p : i == 4 ? t : V;
g = i == 0 ? t : i == 1 ? V : i == 2 ? V : i == 3 ? q : i == 4 ? p : p;
b = i == 0 ? p : i == 1 ? p : i == 2 ? t : i == 3 ? V : i == 4 ? V : q;}
return make_float3(r, g, b);
}

__DEVICE__ float3 Hue_Chart( int width, int height, int X, int Y) {
float H, S, V;
H = (float)X / (width - 1.0f);
S = (float)Y / (height - 1.0f);
S = _powf(S, 0.3f);
V = 0.8f;
float3 rgb = HSV_to_RGB(H, S, V);
return rgb;
}

__DEVICE__ float Limiter(float val, float limiter) {
float Alpha = limiter > 1.0f ? val + (1.0f - limiter) * (1.0f - val) : limiter >= 0.0f ? (val >= limiter ? 1.0f : 
val / limiter) : limiter < -1.0f ? (1.0f - val) + (limiter + 1.0f) * val : val <= (1.0f + limiter) ? 1.0f : 
(1.0 - val) / (1.0f - (limiter + 1.0f));
Alpha = _clampf(Alpha, 0.0f, 1.0f);
return Alpha;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
float3 RGB = make_float3(p_R, p_G, p_B);
RGB = ACESCCT ? ACEScct_to_Rec709(RGB) : ACEScc_to_Rec709(RGB);
RGB = CHART ? Hue_Chart(p_Width, p_Height, p_X, p_Y) : RGB;
float3 Orig = RGB;
float3 In = Orig; //clamp_f3(Orig, 0.0f, 1.0f);
float MAX = _fmaxf(_fmaxf(In.x, In.y), In.z);
float MIN = _fminf(_fminf(In.x, In.y), In.z);
float DELTA = _fmaxf(MAX - MIN, 0.0f);
float SAT = MAX != 0.0f ? DELTA / MAX : 0.0f;
float LUMA = In.x * 0.2126f + In.y * 0.7152f + In.z * 0.0722f;
float alphaCyan = 1.0f - _fabs(In.y - In.z) / DELTA;
float alphaMagenta = 1.0f - _fabs(In.x - In.z) / DELTA;
float alphaYellow = 1.0f - _fabs(In.y - In.x) / DELTA;
if(BELLCURVE){
alphaCyan = bellCurve(0.5f, 0.5f, alphaCyan/2.0f);
alphaMagenta = bellCurve(0.5f, 0.5f, alphaMagenta/2.0f);
alphaYellow = bellCurve(0.5f, 0.5f, alphaYellow/2.0f);
}
RED = (RED * 0.5f) + 1.0f;
CYAN = (CYAN * 0.5f) + 1.0f;
GREEN = (GREEN * 0.5f) + 1.0f;
MAGENTA = (MAGENTA * 0.5f) + 1.0f;
BLUE = (BLUE * 0.5f) + 1.0f;
YELLOW = (YELLOW * 0.5f) + 1.0f;
if(In.x == MAX) RGB = pow_f3(RGB, 1.0f/RED) * alphaCyan + RGB * (1.0f - alphaCyan);
if(In.x == MIN) RGB = pow_f3(RGB, 1.0f/CYAN) * alphaCyan + RGB * (1.0f - alphaCyan);
if(In.y == MAX) RGB = pow_f3(RGB, 1.0f/GREEN) * alphaMagenta + RGB * (1.0f - alphaMagenta);
if(In.y == MIN) RGB = pow_f3(RGB, 1.0f/MAGENTA) * alphaMagenta + RGB * (1.0f - alphaMagenta);
if(In.z == MAX) RGB = pow_f3(RGB, 1.0f/BLUE) * alphaYellow + RGB * (1.0f - alphaYellow);
if(In.z == MIN) RGB = pow_f3(RGB, 1.0f/YELLOW) * alphaYellow + RGB * (1.0f - alphaYellow);
if(DELTA == 0.0f) RGB = Orig;
SAT = _powf(SAT, 0.5f);
float alpha = Limiter(LUMA, LUMM) * Limiter(SAT, SATT);
RGB.x = RGB.x * alpha + Orig.x * (1.0f - alpha);
RGB.y = RGB.y * alpha + Orig.y * (1.0f - alpha);
RGB.z = RGB.z * alpha + Orig.z * (1.0f - alpha);
if(ALPHA) RGB = make_float3(alpha, alpha, alpha);
RGB = ACESCCT ? Rec709_to_ACEScct(RGB) : Rec709_to_ACEScc(RGB);
return RGB;
}